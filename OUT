GETTING AST FOR tests/in/J2_4_InterfaceExtends_MultipleWays/A.java
RUNNING SCANNER
RUNNING PARSER
RUNNING WEEDER
============= AST ==============
c-unit
  ()
  interface public () A ()
    BLOCK g97
    |  method public () #s((ptype ast 0 (1 ())) () int) #s((methoddecl ast 0 (1 ())) () m1 ())
    |    ()
DOING IMPORT STUFF
GETTING AST FOR tests/in/J2_4_InterfaceExtends_MultipleWays/B.java
RUNNING SCANNER
RUNNING PARSER
RUNNING WEEDER
============= AST ==============
c-unit
  ()
  interface public () B ((A))
    BLOCK g98
DOING IMPORT STUFF
GETTING AST FOR tests/in/J2_4_InterfaceExtends_MultipleWays/C.java
RUNNING SCANNER
RUNNING PARSER
RUNNING WEEDER
============= AST ==============
c-unit
  ()
  interface public () C ((A))
    BLOCK g99
DOING IMPORT STUFF
GETTING AST FOR tests/in/J2_4_InterfaceExtends_MultipleWays/D.java
RUNNING SCANNER
RUNNING PARSER
RUNNING WEEDER
============= AST ==============
c-unit
  ()
  interface public () D ((B) (C) (A))
    BLOCK g100
DOING IMPORT STUFF
GETTING AST FOR tests/in/J2_4_InterfaceExtends_MultipleWays/Main.java
RUNNING SCANNER
RUNNING PARSER
RUNNING WEEDER
============= AST ==============
c-unit
  ()
  class public abstract Main () ((D))
    BLOCK g101
    |  method public (abstract) #s((ptype ast 0 (1 ())) () int) #s((methoddecl ast 0 (1 ())) () a1 ())
    |    ()
    |  constructor public #s((methoddecl ast 0 (1 ())) () Main ())
    |    BLOCK g102
    |  method public (static) #s((ptype ast 0 (1 ())) () int) #s((methoddecl ast 0 (1 ())) () test ())
    |    BLOCK g103
    |    |  #s((return ast 0 (1 ())) () #s((literal ast 0 (1 ())) () #s((ptype ast 0 (1 ())) () int) 123))
DOING IMPORT STUFF
GETTING AST FOR tests/in/J2_4_InterfaceExtends_MultipleWays/Main.java~
RUNNING SCANNER
RUNNING PARSER
RUNNING WEEDER
============= AST ==============
c-unit
  ()
  class public abstract Main () ((D))
    BLOCK g104
    |  method public (abstract) #s((ptype ast 0 (1 ())) () int) #s((methoddecl ast 0 (1 ())) () a1 ())
    |    ()
    |  method public () #s((ptype ast 0 (1 ())) () int) #s((methoddecl ast 0 (1 ())) () m1 ())
    |    BLOCK g105
    |  constructor public #s((methoddecl ast 0 (1 ())) () Main ())
    |    BLOCK g106
    |  method public (static) #s((ptype ast 0 (1 ())) () int) #s((methoddecl ast 0 (1 ())) () test ())
    |    BLOCK g107
    |    |  #s((return ast 0 (1 ())) () #s((literal ast 0 (1 ())) () #s((ptype ast 0 (1 ())) () int) 123))
DOING IMPORT STUFF

============== PRINTING ASTS ==============

================ AST ================
c-unit
  ()
  interface public () A ()
    BLOCK g97
    |  method public () #s((ptype ast 0 (1 ())) () int) #s((methoddecl ast 0 (1 ())) () m1 ())
    |    ()

================ AST ================
c-unit
  ()
  interface public () B ((A))
    BLOCK g98

================ AST ================
c-unit
  ()
  interface public () C ((A))
    BLOCK g99

================ AST ================
c-unit
  ()
  interface public () D ((B) (C) (A))
    BLOCK g100

================ AST ================
c-unit
  ()
  class public abstract Main () ((D))
    BLOCK g101
    |  method public (abstract) #s((ptype ast 0 (1 ())) () int) #s((methoddecl ast 0 (1 ())) () a1 ())
    |    ()
    |  constructor public #s((methoddecl ast 0 (1 ())) () Main ())
    |    BLOCK g102
    |  method public (static) #s((ptype ast 0 (1 ())) () int) #s((methoddecl ast 0 (1 ())) () test ())
    |    BLOCK g103
    |    |  #s((return ast 0 (1 ())) () #s((literal ast 0 (1 ())) () #s((ptype ast 0 (1 ())) () int) 123))

================ AST ================
c-unit
  ()
  class public abstract Main () ((D))
    BLOCK g104
    |  method public (abstract) #s((ptype ast 0 (1 ())) () int) #s((methoddecl ast 0 (1 ())) () a1 ())
    |    ()
    |  method public () #s((ptype ast 0 (1 ())) () int) #s((methoddecl ast 0 (1 ())) () m1 ())
    |    BLOCK g105
    |  constructor public #s((methoddecl ast 0 (1 ())) () Main ())
    |    BLOCK g106
    |  method public (static) #s((ptype ast 0 (1 ())) () int) #s((methoddecl ast 0 (1 ())) () test ())
    |    BLOCK g107
    |    |  #s((return ast 0 (1 ())) () #s((literal ast 0 (1 ())) () #s((ptype ast 0 (1 ())) () int) 123))

============== Environments ==============
(A)
============================
Types
(A, interface)
(m1(), #s((ptype ast 0 (1 ())) () int))

Vars

Constructors

Methods
(m1(), g97)
(B)
============================
Types
(B, interface)

Vars

Constructors

Methods
(C)
============================
Types
(C, interface)

Vars

Constructors

Methods
(D)
============================
Types
(D, interface)

Vars

Constructors

Methods
(Main)
============================
Types
(Main, abstract class)
(test(), #s((ptype ast 0 (1 ())) () int))
(a1(), #s((ptype ast 0 (1 ())) () int))

Vars

Constructors
(Main(), g101)

Methods
(test(), g101)
(a1(), g101)
(Main)
============================
Types
(Main, abstract class)
(test(), #s((ptype ast 0 (1 ())) () int))
(m1(), #s((ptype ast 0 (1 ())) () int))
(a1(), #s((ptype ast 0 (1 ())) () int))

Vars

Constructors
(Main(), g104)

Methods
(test(), g104)
(m1(), g104)
(a1(), g104)

============== Type Linker ==============
############ LINKING NAMES IN FILE: (A) ############
############ LINKING NAMES IN FILE: (B) ############
############ LINKING NAMES IN FILE: (C) ############
############ LINKING NAMES IN FILE: (D) ############
############ LINKING NAMES IN FILE: (Main) ############
############ LINKING NAMES IN FILE: (Main) ############

======= LINKS FOR FILE: (A) =======

TYPE: (A) LINKS TO:
(A)

TYPE: (B) LINKS TO:
(B)

TYPE: (C) LINKS TO:
(C)

TYPE: (D) LINKS TO:
(D)

TYPE: (Main) LINKS TO:
(Main)

TYPE: (Main) LINKS TO:
(Main)

======= LINKS FOR FILE: (B) =======

TYPE: (A) LINKS TO:
(A)

TYPE: (A) LINKS TO:
(A)

TYPE: (B) LINKS TO:
(B)

TYPE: (C) LINKS TO:
(C)

TYPE: (D) LINKS TO:
(D)

TYPE: (Main) LINKS TO:
(Main)

TYPE: (Main) LINKS TO:
(Main)

======= LINKS FOR FILE: (C) =======

TYPE: (A) LINKS TO:
(A)

TYPE: (A) LINKS TO:
(A)

TYPE: (B) LINKS TO:
(B)

TYPE: (C) LINKS TO:
(C)

TYPE: (D) LINKS TO:
(D)

TYPE: (Main) LINKS TO:
(Main)

TYPE: (Main) LINKS TO:
(Main)

======= LINKS FOR FILE: (D) =======

TYPE: (B) LINKS TO:
(B)

TYPE: (C) LINKS TO:
(C)

TYPE: (A) LINKS TO:
(A)

TYPE: (A) LINKS TO:
(A)

TYPE: (B) LINKS TO:
(B)

TYPE: (C) LINKS TO:
(C)

TYPE: (D) LINKS TO:
(D)

TYPE: (Main) LINKS TO:
(Main)

TYPE: (Main) LINKS TO:
(Main)

======= LINKS FOR FILE: (Main) =======

TYPE: (D) LINKS TO:
(D)

TYPE: (A) LINKS TO:
(A)

TYPE: (B) LINKS TO:
(B)

TYPE: (C) LINKS TO:
(C)

TYPE: (D) LINKS TO:
(D)

TYPE: (Main) LINKS TO:
(Main)

TYPE: (Main) LINKS TO:
(Main)

======= LINKS FOR FILE: (Main) =======

TYPE: (D) LINKS TO:
(D)

TYPE: (A) LINKS TO:
(A)

TYPE: (B) LINKS TO:
(B)

TYPE: (C) LINKS TO:
(C)

TYPE: (D) LINKS TO:
(D)

TYPE: (Main) LINKS TO:
(Main)

TYPE: (Main) LINKS TO:
(Main)

============== BLAH ==============
====== CHECKING HEIRARCHY FOR AST, class/interface: (A) ======
CHECKING INTERFACE HEIR FOR: (A)
--- EXTENDS: ()
CLASS ENV:
Types
(A, interface)
(m1(), #s((ptype ast 0 (1 ())) () int))

Vars

Constructors

Methods
(m1(), g97)
====== CHECKING HEIRARCHY FOR AST, class/interface: (B) ======
CHECKING INTERFACE HEIR FOR: (B)
--- EXTENDS: ((A))
--- Getting interface stuff for: ((A) #<link>)
CHECKING INTERFACE HEIR FOR: (A)
--- EXTENDS: ()
CLASS ENV:
Types
(B, interface)
(m1(), #s((ptype ast 0 (1 ())) () int))

Vars

Constructors

Methods
(m1(), g97)
====== CHECKING HEIRARCHY FOR AST, class/interface: (C) ======
CHECKING INTERFACE HEIR FOR: (C)
--- EXTENDS: ((A))
--- Getting interface stuff for: ((A) #<link>)
CHECKING INTERFACE HEIR FOR: (A)
--- EXTENDS: ()
CLASS ENV:
Types
(C, interface)
(m1(), #s((ptype ast 0 (1 ())) () int))

Vars

Constructors

Methods
(m1(), g97)
====== CHECKING HEIRARCHY FOR AST, class/interface: (D) ======
CHECKING INTERFACE HEIR FOR: (D)
--- EXTENDS: ((B) (C) (A))
--- Getting interface stuff for: ((B) #<link>)
CHECKING INTERFACE HEIR FOR: (B)
--- EXTENDS: ((A))
--- Getting interface stuff for: ((A) #<link>)
CHECKING INTERFACE HEIR FOR: (A)
--- EXTENDS: ()
--- Getting interface stuff for: ((C) #<link>)
CHECKING INTERFACE HEIR FOR: (C)
--- EXTENDS: ((A))
--- Getting interface stuff for: ((A) #<link>)
CHECKING INTERFACE HEIR FOR: (A)
--- EXTENDS: ()
--- Getting interface stuff for: ((A) #<link>)
CHECKING INTERFACE HEIR FOR: (A)
--- EXTENDS: ()
CLASS ENV:
Types
(D, interface)
(m1(), #s((ptype ast 0 (1 ())) () int))

Vars

Constructors

Methods
(m1(), g97)
====== CHECKING HEIRARCHY FOR AST, class/interface: (Main) ======
CHECKING CLASS HEIR FOR: (Main)
--- EXTENDS: ()
--- IMPLEMENTS: ((D))
--- Getting class stuff for: #f
--- Getting interface stuff for: ((D) #<link>)
CHECKING INTERFACE HEIR FOR: (D)
--- EXTENDS: ((B) (C) (A))
--- Getting interface stuff for: ((B) #<link>)
CHECKING INTERFACE HEIR FOR: (B)
--- EXTENDS: ((A))
--- Getting interface stuff for: ((A) #<link>)
CHECKING INTERFACE HEIR FOR: (A)
--- EXTENDS: ()
--- Getting interface stuff for: ((C) #<link>)
CHECKING INTERFACE HEIR FOR: (C)
--- EXTENDS: ((A))
--- Getting interface stuff for: ((A) #<link>)
CHECKING INTERFACE HEIR FOR: (A)
--- EXTENDS: ()
--- Getting interface stuff for: ((A) #<link>)
CHECKING INTERFACE HEIR FOR: (A)
--- EXTENDS: ()
CLASS ENV:
Types
(Main, abstract class)
(test(), #s((ptype ast 0 (1 ())) () int))
(a1(), #s((ptype ast 0 (1 ())) () int))
(m1(), #s((ptype ast 0 (1 ())) () int))

Vars

Constructors
(Main(), g101)

Methods
(test(), g101)
(a1(), g101)
(m1(), g97)
====== CHECKING HEIRARCHY FOR AST, class/interface: (Main) ======
CHECKING CLASS HEIR FOR: (Main)
--- EXTENDS: ()
--- IMPLEMENTS: ((D))
--- Getting class stuff for: #f
--- Getting interface stuff for: ((D) #<link>)
CHECKING INTERFACE HEIR FOR: (D)
--- EXTENDS: ((B) (C) (A))
--- Getting interface stuff for: ((B) #<link>)
CHECKING INTERFACE HEIR FOR: (B)
--- EXTENDS: ((A))
--- Getting interface stuff for: ((A) #<link>)
CHECKING INTERFACE HEIR FOR: (A)
--- EXTENDS: ()
--- Getting interface stuff for: ((C) #<link>)
CHECKING INTERFACE HEIR FOR: (C)
--- EXTENDS: ((A))
--- Getting interface stuff for: ((A) #<link>)
CHECKING INTERFACE HEIR FOR: (A)
--- EXTENDS: ()
--- Getting interface stuff for: ((A) #<link>)
CHECKING INTERFACE HEIR FOR: (A)
--- EXTENDS: ()
CLASS ENV:
Types
(Main, abstract class)
(test(), #s((ptype ast 0 (1 ())) () int))
(a1(), #s((ptype ast 0 (1 ())) () int))
(m1(), #s((ptype ast 0 (1 ())) () int))

Vars

Constructors
(Main(), g101)

Methods
(test(), g101)
(a1(), g101)
(m1(), g97)
'(#<void> #<void> #<void> #<void> #<void> #<void>)
Compiled
