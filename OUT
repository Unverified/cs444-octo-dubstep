====== Scanned Tokens ======
public : public
class : class
id : testfile
ocurl : {
public : public
id : testfile
oparen : (
cparen : )
ocurl : {
int : int
id : a
eq : =
oparen : (
int : int
cparen : )
minus : -
id : foo
oparen : (
decimal-lit : 1
plus : +
minus : -
decimal-lit : 1
cparen : )
dot : .
id : a
dot : .
id : bar
oparen : (
cparen : )
semi : ;
ccurl : }
ccurl : }
========= AFTER PRE PARSER ==========
====== Scanned Tokens ======
public : public
class : class
id : testfile
ocurl : {
public : public
id : testfile
oparen : (
cparen : )
ocurl : {
int : int
id : a
eq : =
oparen : (
int : int
cparen : )
minus : -
id : foo
oparen : (
decimal-lit : 1
plus : +
oparen : (
minus : -
decimal-lit : 1
cparen : )
cparen : )
dot : .
id : a
dot : .
id : bar
oparen : (
cparen : )
semi : ;
ccurl : }
ccurl : }
shift: g0 : BOF : g334
reduce: g334 : public
reduces: (#(struct:reduce #(struct:rule PACKAGE ()) import) #(struct:reduce #(struct:rule PACKAGE ()) public))
shift: g334 : PACKAGE : g140
reduce: g140 : public
reduces: (#(struct:reduce #(struct:rule IMPORTS ()) import) #(struct:reduce #(struct:rule IMPORTS ()) public))
shift: g140 : IMPORTS : g336
reduce: g336 : public
shift: g336 : public : g187
reduce: g187 : class
reduces: (#(struct:reduce #(struct:rule IMOD ()) interface) #(struct:reduce #(struct:rule CMOD ()) class))
shift: g187 : CMOD : g345
reduce: g345 : class
shift: g345 : class : g222
reduce: g222 : id
shift: g222 : id : g147
reduce: g147 : ocurl
reduces: (#(struct:reduce #(struct:rule CLASS_ADDITION ()) ocurl))
shift: g147 : CLASS_ADDITION : g268
reduce: g268 : ocurl
shift: g268 : ocurl : g302
reduce: g302 : public
shift: g302 : public : g283
reduce: g283 : id
reduces: (#(struct:reduce #(struct:rule SCOPE (public)) static) #(struct:reduce #(struct:rule SCOPE (public)) char) #(struct:reduce #(struct:rule SCOPE (public)) int) #(struct:reduce #(struct:rule SCOPE (public)) short) #(struct:reduce #(struct:rule SCOPE (public)) void) #(struct:reduce #(struct:rule SCOPE (public)) abstract) #(struct:reduce #(struct:rule SCOPE (public)) boolean) #(struct:reduce #(struct:rule SCOPE (public)) id) #(struct:reduce #(struct:rule SCOPE (public)) byte) #(struct:reduce #(struct:rule SCOPE (public)) final))
shift: g302 : SCOPE : g62
reduce: g62 : id
shift: g62 : id : g331
reduce: g331 : oparen
reduces: (#(struct:reduce #(struct:rule IDS (id)) id) #(struct:reduce #(struct:rule IDS (id)) dot) #(struct:reduce #(struct:rule IDS (id)) new))
shift: g331 : oparen : g98
reduce: g98 : cparen
reduces: (#(struct:reduce #(struct:rule ARGUMENTS ()) cparen))
shift: g98 : ARGUMENTS : g335
reduce: g335 : cparen
shift: g335 : cparen : g163
reduce: g163 : ocurl
shift: g163 : ocurl : g79
reduce: g79 : int
reduces: (#(struct:reduce #(struct:rule BLOCK_BODY ()) ccurl))
shift: g79 : int : g16
reduce: g16 : id
reduces: (#(struct:reduce #(struct:rule PRIMITIVE (int)) amp) #(struct:reduce #(struct:rule PRIMITIVE (int)) cparen) #(struct:reduce #(struct:rule PRIMITIVE (int)) instanceof) #(struct:reduce #(struct:rule PRIMITIVE (int)) ampamp) #(struct:reduce #(struct:rule PRIMITIVE (int)) semi) #(struct:reduce #(struct:rule PRIMITIVE (int)) osquare) #(struct:reduce #(struct:rule PRIMITIVE (int)) new) #(struct:reduce #(struct:rule PRIMITIVE (int)) noteq) #(struct:reduce #(struct:rule PRIMITIVE (int)) barbar) #(struct:reduce #(struct:rule PRIMITIVE (int)) comma) #(struct:reduce #(struct:rule PRIMITIVE (int)) eqeq) #(struct:reduce #(struct:rule PRIMITIVE (int)) csquare) #(struct:reduce #(struct:rule PRIMITIVE (int)) id) #(struct:reduce #(struct:rule PRIMITIVE (int)) bar))
shift: g79 : PRIMITIVE : g34
reduce: g34 : id
reduces: (#(struct:reduce #(struct:rule TYPE (PRIMITIVE)) new) #(struct:reduce #(struct:rule TYPE (PRIMITIVE)) csquare) #(struct:reduce #(struct:rule TYPE (PRIMITIVE)) cparen) #(struct:reduce #(struct:rule TYPE (PRIMITIVE)) ampamp) #(struct:reduce #(struct:rule TYPE (PRIMITIVE)) comma) #(struct:reduce #(struct:rule TYPE (PRIMITIVE)) amp) #(struct:reduce #(struct:rule TYPE (PRIMITIVE)) noteq) #(struct:reduce #(struct:rule TYPE (PRIMITIVE)) bar) #(struct:reduce #(struct:rule TYPE (PRIMITIVE)) semi) #(struct:reduce #(struct:rule TYPE (PRIMITIVE)) instanceof) #(struct:reduce #(struct:rule TYPE (PRIMITIVE)) eqeq) #(struct:reduce #(struct:rule TYPE (PRIMITIVE)) id) #(struct:reduce #(struct:rule TYPE (PRIMITIVE)) barbar))
shift: g79 : TYPE : g115
reduce: g115 : id
shift: g115 : id : g311
reduce: g311 : eq
shift: g311 : eq : g177
reduce: g177 : oparen
shift: g177 : oparen : g76
reduce: g76 : int
shift: g76 : int : g16
reduce: g16 : cparen
reduces: (#(struct:reduce #(struct:rule PRIMITIVE (int)) amp) #(struct:reduce #(struct:rule PRIMITIVE (int)) cparen) #(struct:reduce #(struct:rule PRIMITIVE (int)) instanceof) #(struct:reduce #(struct:rule PRIMITIVE (int)) ampamp) #(struct:reduce #(struct:rule PRIMITIVE (int)) semi) #(struct:reduce #(struct:rule PRIMITIVE (int)) osquare) #(struct:reduce #(struct:rule PRIMITIVE (int)) new) #(struct:reduce #(struct:rule PRIMITIVE (int)) noteq) #(struct:reduce #(struct:rule PRIMITIVE (int)) barbar) #(struct:reduce #(struct:rule PRIMITIVE (int)) comma) #(struct:reduce #(struct:rule PRIMITIVE (int)) eqeq) #(struct:reduce #(struct:rule PRIMITIVE (int)) csquare) #(struct:reduce #(struct:rule PRIMITIVE (int)) id) #(struct:reduce #(struct:rule PRIMITIVE (int)) bar))
shift: g76 : PRIMITIVE : g339
reduce: g339 : cparen
shift: g339 : cparen : g329
reduce: g329 : minus
reduces: (#(struct:reduce #(struct:rule CAST (oparen PRIMITIVE cparen)) id) #(struct:reduce #(struct:rule CAST (oparen PRIMITIVE cparen)) decimal-lit) #(struct:reduce #(struct:rule CAST (oparen PRIMITIVE cparen)) oparen) #(struct:reduce #(struct:rule CAST (oparen PRIMITIVE cparen)) bool-lit) #(struct:reduce #(struct:rule CAST (oparen PRIMITIVE cparen)) null-lit) #(struct:reduce #(struct:rule CAST (oparen PRIMITIVE cparen)) this) #(struct:reduce #(struct:rule CAST (oparen PRIMITIVE cparen)) not) #(struct:reduce #(struct:rule CAST (oparen PRIMITIVE cparen)) new))
shift: g329 : minus : #f
DONE PARSING
Node Stack:
leafnode | minus : -
leafnode | cparen : )
node | PRIMITIVE
  leafnode | int : int
leafnode | oparen : (
leafnode | eq : =
leafnode | id : a
node | TYPE
  node | PRIMITIVE
    leafnode | int : int
leafnode | ocurl : {
leafnode | cparen : )
node | ARGUMENTS
leafnode | oparen : (
leafnode | id : testfile
node | SCOPE
  leafnode | public : public
leafnode | ocurl : {
node | CLASS_ADDITION
leafnode | id : testfile
leafnode | class : class
node | CMOD
leafnode | public : public
node | IMPORTS
node | PACKAGE
leafnode | BOF : BOF
Error
