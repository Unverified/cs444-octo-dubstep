#s((vdecl ast 1) () public static #s(ptype int) #s((varassign ast 1) () x #s((literal ast 1) () #s(ptype int) 10)))
#s((vdecl ast 1) () () () #s(ptype int) #s((varassign ast 1) () y #s((binop ast 1) () plus (x) #s((literal ast 1) () #s(ptype int) 1))))
============= AST ==============
c-unit
  ()
  class public empty statictest empty empty
  block g126
    (varassign (vdecl public static (ptype int) x) (literal (ptype int) 10)
    constructor public (methoddecl statictest)
      block g127
    method public (static) (ptype int) (methoddecl test)
      block g128
        (varassign (vdecl empty empty (ptype int) y) (binop plus (varuse x) (literal (ptype int) 1))
        block g129
          (return (literal (ptype int) 1))
============== PRINTING ASTS ==============

================ AST ================
c-unit
  ()
  (pimport (java lang))
  class public empty statictest empty empty
  block g126
    (varassign (vdecl public static (ptype int) x) (literal (ptype int) 10)
    constructor public (methoddecl statictest)
      block g127
    method public (static) (ptype int) (methoddecl test)
      block g128
        (varassign (vdecl empty empty (ptype int) y) (binop plus (varuse x) (literal (ptype int) 1))
        block g129
          (return (literal (ptype int) 1))
================ AST ================
c-unit
  (java io)
  (pimport (java lang))
  class public empty OutputStream empty empty
  block g1925
    constructor public (methoddecl OutputStream)
      block g1926
    method public empty (ptype void) (methoddecl write (parameter (ptype char) c))
      block g1927
        (methodcall empty write(#s((cast ast 1) () #s(ptype int) #s((varuse ast 1) () c))))
    method public empty (ptype void) (methoddecl write (parameter (ptype int) b))
      block g1928
        (methodcall (ambiguous (PrintStream)) nativeWrite(#s((varuse ast 1) () b)))
    method protected (static native) (ptype int) (methoddecl nativeWrite (parameter (ptype int) b))
      block g1930
    method public empty (ptype void) (methoddecl flush)
      block g1929
================ AST ================
c-unit
  (java io)
  (pimport (java lang))
  class public empty PrintStream (OutputStream) empty
  block g1931
    constructor public (methoddecl PrintStream)
      block g1932
    method public empty (ptype void) (methoddecl print (parameter (rtype (String)) s))
      block g1933
        for (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0) (binop lt (varuse i) (methodcall (ambiguous (s)) lengthempty)) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
          block g1934
            (methodcall empty write(#s((methodcall ast 1) () #s((ambiguous ast 1) () (s)) charAt (#s((varuse ast 1) () i)))))
    method public empty (ptype void) (methoddecl println)
      block g1935
        (methodcall empty println(#s((literal ast 1) () #s(rtype (java lang String)) "")))
    method public empty (ptype void) (methoddecl println (parameter (rtype (String)) s))
      block g1936
        (methodcall empty print(#s((varuse ast 1) () s)))
        (methodcall empty write(#s((literal ast 1) () #s(ptype char) 39)))
    method public empty (ptype void) (methoddecl println (parameter (rtype (Object)) b))
      block g1937
        (methodcall empty println(#s((methodcall ast 1) () #s((ambiguous ast 1) () (String)) valueOf (#s((varuse ast 1) () b)))))
    method public empty (ptype void) (methoddecl println (parameter (ptype boolean) b))
      block g1938
        (methodcall empty println(#s((methodcall ast 1) () #s((ambiguous ast 1) () (String)) valueOf (#s((varuse ast 1) () b)))))
    method public empty (ptype void) (methoddecl println (parameter (ptype byte) b))
      block g1939
        (methodcall empty println(#s((methodcall ast 1) () #s((ambiguous ast 1) () (String)) valueOf (#s((varuse ast 1) () b)))))
    method public empty (ptype void) (methoddecl println (parameter (ptype char) b))
      block g1940
        (methodcall empty println(#s((methodcall ast 1) () #s((ambiguous ast 1) () (String)) valueOf (#s((varuse ast 1) () b)))))
    method public empty (ptype void) (methoddecl println (parameter (ptype short) b))
      block g1941
        (methodcall empty println(#s((methodcall ast 1) () #s((ambiguous ast 1) () (String)) valueOf (#s((varuse ast 1) () b)))))
    method public empty (ptype void) (methoddecl println (parameter (ptype int) b))
      block g1942
        (methodcall empty println(#s((methodcall ast 1) () #s((ambiguous ast 1) () (String)) valueOf (#s((varuse ast 1) () b)))))
    method public empty (ptype void) (methoddecl print (parameter (rtype (Object)) b))
      block g1943
        (methodcall empty print(#s((methodcall ast 1) () #s((ambiguous ast 1) () (String)) valueOf (#s((varuse ast 1) () b)))))
    method public empty (ptype void) (methoddecl print (parameter (ptype boolean) b))
      block g1944
        (methodcall empty print(#s((methodcall ast 1) () #s((ambiguous ast 1) () (String)) valueOf (#s((varuse ast 1) () b)))))
    method public empty (ptype void) (methoddecl print (parameter (ptype byte) b))
      block g1945
        (methodcall empty print(#s((methodcall ast 1) () #s((ambiguous ast 1) () (String)) valueOf (#s((varuse ast 1) () b)))))
    method public empty (ptype void) (methoddecl print (parameter (ptype char) b))
      block g1946
        (methodcall empty print(#s((methodcall ast 1) () #s((ambiguous ast 1) () (String)) valueOf (#s((varuse ast 1) () b)))))
    method public empty (ptype void) (methoddecl print (parameter (ptype short) b))
      block g1947
        (methodcall empty print(#s((methodcall ast 1) () #s((ambiguous ast 1) () (String)) valueOf (#s((varuse ast 1) () b)))))
    method public empty (ptype void) (methoddecl print (parameter (ptype int) b))
      block g1948
        (methodcall empty print(#s((methodcall ast 1) () #s((ambiguous ast 1) () (String)) valueOf (#s((varuse ast 1) () b)))))
================ AST ================
c-unit
  (java io)
  (pimport (java lang))
  interface public empty Serializable empty
  block g1949
================ AST ================
c-unit
  (java lang)
  (pimport (java lang))
  class public final Boolean empty empty
  block g1950
    (vdecl public empty (ptype boolean) value)
    constructor public (methoddecl Boolean (parameter (ptype boolean) i))
      block g1951
        (varassign (varuse value) (varuse i)
    constructor public (methoddecl Boolean)
      block g1952
    method public empty (rtype (String)) (methoddecl toString)
      block g1953
        (return (methodcall (ambiguous (String)) valueOf(#s((varuse ast 1) () value))))
    (varassign (vdecl public static (ptype byte) MAX_VALUE) (cast (ptype byte) (literal (ptype int) 127))
================ AST ================
c-unit
  (java lang)
  (pimport (java lang))
  class public final Byte empty empty
  block g1954
    (vdecl public empty (ptype byte) value)
    constructor public (methoddecl Byte (parameter (ptype byte) i))
      block g1955
        (varassign (varuse value) (varuse i)
    constructor public (methoddecl Byte)
      block g1956
    method public empty (rtype (String)) (methoddecl toString)
      block g1957
        (return (methodcall (ambiguous (String)) valueOf(#s((varuse ast 1) () value))))
    (varassign (vdecl public static (ptype byte) MAX_VALUE) (cast (ptype byte) (literal (ptype int) 127))
================ AST ================
c-unit
  (java lang)
  (pimport (java lang))
  class public final Character empty empty
  block g1958
    (vdecl public empty (ptype char) value)
    constructor public (methoddecl Character (parameter (ptype char) i))
      block g1959
        (varassign (varuse value) (varuse i)
    constructor public (methoddecl Character)
      block g1960
    method public empty (rtype (String)) (methoddecl toString)
      block g1961
        (return (methodcall (ambiguous (String)) valueOf(#s((varuse ast 1) () value))))
================ AST ================
c-unit
  (java lang)
  (pimport (java lang))
  class public empty Class empty empty
  block g1962
    constructor public (methoddecl Class)
      block g1963
================ AST ================
c-unit
  (java lang)
  (pimport (java lang))
  interface public empty Cloneable empty
  block g1964
================ AST ================
c-unit
  (java lang)
  (pimport (java lang))
  class public final Integer (Number) empty
  block g1965
    (vdecl public empty (ptype int) value)
    constructor public (methoddecl Integer (parameter (ptype int) i))
      block g1966
        (varassign (varuse value) (varuse i)
    method public empty (ptype int) (methoddecl intValue)
      block g1967
        (return (varuse value))
    method public (static) (ptype int) (methoddecl parseInt (parameter (rtype (String)) s))
      block g1968
        (varassign (vdecl empty empty (ptype int) ret) (literal (ptype int) 0)
        block g1971
          (varassign (vdecl empty empty (ptype boolean) neg) (literal (ptype boolean) #f)
          block g1972
            (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0)
            block g1973
              while (binop ampamp (binop lt (varuse i) (methodcall (ambiguous (s)) lengthempty)) (binop barbar (binop eqeq (methodcall (ambiguous (s)) charAt(#s((varuse ast 1) () i))) (literal (ptype char) 39)) (binop ampamp (binop gteq (methodcall (ambiguous (s)) charAt(#s((varuse ast 1) () i))) (literal (ptype char) 39)) (binop lteq (methodcall (ambiguous (s)) charAt(#s((varuse ast 1) () i))) (literal (ptype char) 39)))))
                block g1969
                  iff (binop eqeq (methodcall (ambiguous (s)) charAt(#s((varuse ast 1) () i))) (literal (ptype char) 39)) (varassign (varuse neg) (unop not (varuse neg))block g1970
                      (varassign (varuse ret) (binop minus (binop plus (binop star (varuse ret) (literal (ptype int) 10)) (methodcall (ambiguous (s)) charAt(#s((varuse ast 1) () i)))) (literal (ptype char) 39))
                  (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
              iff (varuse neg) (varassign (varuse ret) (unop minus (varuse ret))empty
              (return (varuse ret))
    constructor public (methoddecl Integer (parameter (rtype (String)) s))
      block g1974
        (varassign (varuse value) (methodcall (ambiguous (Integer)) parseInt(#s((varuse ast 1) () s)))
    constructor public (methoddecl Integer)
      block g1975
        (varassign (varuse value) (literal (ptype int) 0)
    method public empty (rtype (String)) (methoddecl toString)
      block g1976
        (return (methodcall (ambiguous (String)) valueOf(#s((varuse ast 1) () value))))
    (varassign (vdecl public static (ptype int) MAX_VALUE) (literal (ptype int) 2147483647)
================ AST ================
c-unit
  (java lang)
  (pimport (java lang))
  class public abstract Number empty empty
  block g1977
    method public (abstract) (ptype int) (methoddecl intValue)
      block g1979
    constructor public (methoddecl Number)
      block g1978
================ AST ================
c-unit
  (java lang)
  (pimport (java lang))
  class public empty Object empty empty
  block g1980
    constructor public (methoddecl Object)
      block g1981
    method public empty (ptype boolean) (methoddecl equals (parameter (rtype (Object)) other))
      block g1982
        (return (binop eqeq (this empty) (varuse other)))
    method public empty (rtype (String)) (methoddecl toString)
      block g1983
        (return (literal (rtype (java lang String)) "Some random object"))
    method public empty (ptype int) (methoddecl hashCode)
      block g1984
        (return (literal (ptype int) 42))
    method protected empty (rtype (Object)) (methoddecl clone)
      block g1985
        (return (this empty))
    method public (final) (rtype (Class)) (methoddecl getClass)
      block g1986
        (return (literal (ptype null) null))
================ AST ================
c-unit
  (java lang)
  (pimport (java lang))
  class public final Short (Number) empty
  block g1987
    (vdecl public empty (ptype short) value)
    constructor public (methoddecl Short (parameter (ptype short) i))
      block g1988
        (varassign (varuse value) (varuse i)
    method public empty (ptype int) (methoddecl intValue)
      block g1989
        (return (cast (ptype int) (varuse value)))
    constructor public (methoddecl Short)
      block g1990
    method public empty (rtype (String)) (methoddecl toString)
      block g1991
        (return (methodcall (ambiguous (String)) valueOf(#s((varuse ast 1) () value))))
================ AST ================
c-unit
  (java lang)
  (pimport (java lang))
  (cimport (java util Arrays))
  class public empty String empty empty
  block g1992
    (vdecl public empty (atype (ptype char)) chars)
    method public empty (ptype int) (methoddecl length)
      block g1993
        (return (ambiguous (chars length)))
    method public empty (ptype char) (methoddecl charAt (parameter (ptype int) i))
      block g1994
        (return (arrayaccess (varuse chars) (varuse i)))
    constructor public (methoddecl String)
      block g1995
        (varassign (varuse chars) (arraycreate (ptype char) (literal (ptype int) 0))
    constructor public (methoddecl String (parameter (atype (ptype char)) chars))
      block g1996
        (varassign (fieldaccess (this empty) chars) (arraycreate (ptype char) (ambiguous (chars length)))
        for (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0) (binop lt (varuse i) (ambiguous (chars length))) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
          block g1997
            (varassign (arrayaccess (fieldaccess (this empty) chars) (varuse i)) (arrayaccess (varuse chars) (varuse i))
    constructor public (methoddecl String (parameter (rtype (String)) other))
      block g1998
        (varassign (fieldaccess (this empty) chars) (ambiguous (other chars))
    method public empty (rtype (String)) (methoddecl concat (parameter (rtype (String)) s2))
      block g1999
        (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0)
        block g2002
          (varassign (vdecl empty empty (atype (ptype char)) newchars) (arraycreate (ptype char) (binop plus (methodcall empty lengthempty) (methodcall (ambiguous (s2)) lengthempty)))
          block g2003
            for (varassign (varuse i) (literal (ptype int) 0) (binop lt (varuse i) (methodcall empty lengthempty)) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
              block g2000
                (varassign (arrayaccess (varuse newchars) (varuse i)) (arrayaccess (varuse chars) (varuse i))
            for (varassign (varuse i) (literal (ptype int) 0) (binop lt (varuse i) (methodcall (ambiguous (s2)) lengthempty)) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
              block g2001
                (varassign (arrayaccess (varuse newchars) (binop plus (varuse i) (methodcall empty lengthempty))) (arrayaccess (ambiguous (s2 chars)) (varuse i))
            (return (classcreate (rtype (String)) (varuse newchars)))
    method public (static) (rtype (String)) (methoddecl valueOf (parameter (ptype char) c))
      block g2004
        (varassign (vdecl empty empty (atype (ptype char)) newchars) (arraycreate (ptype char) (literal (ptype int) 1))
        block g2005
          (varassign (arrayaccess (varuse newchars) (literal (ptype int) 0)) (varuse c)
          (return (classcreate (rtype (String)) (varuse newchars)))
    method public (static) (rtype (String)) (methoddecl valueOf (parameter (ptype int) i))
      block g2006
        (varassign (vdecl empty empty (atype (ptype char)) ret) (arraycreate (ptype char) (literal (ptype int) 15))
        block g2014
          (varassign (vdecl empty empty (ptype int) j) (literal (ptype int) 0)
          block g2015
            (varassign (vdecl empty empty (ptype boolean) wasneg) (literal (ptype boolean) #f)
            block g2016
              iff (binop eqeq (varuse i) (unop minus (literal (ptype int) 2147483648))) (return (literal (rtype (java lang String)) "-2147483648"))empty
              iff (binop lt (varuse i) (literal (ptype int) 0)) block g2007
                  (varassign (varuse wasneg) (literal (ptype boolean) #t)
                  (varassign (varuse i) (unop minus (varuse i))empty
              iff (binop eqeq (varuse i) (literal (ptype int) 0)) block g2008
                  (varassign (arrayaccess (varuse ret) (varuse j)) (literal (ptype char) 39)
                  (varassign (varuse j) (binop plus (varuse j) (literal (ptype int) 1))block g2009
                  while (binop gt (varuse i) (literal (ptype int) 0))
                    block g2010
                      (varassign (vdecl empty empty (ptype int) d) (binop pct (varuse i) (literal (ptype int) 10))
                      block g2011
                        (varassign (varuse i) (binop slash (varuse i) (literal (ptype int) 10))
                        (varassign (arrayaccess (varuse ret) (varuse j)) (cast (ptype char) (binop plus (varuse d) (literal (ptype char) 39)))
                        (varassign (varuse j) (binop plus (varuse j) (literal (ptype int) 1))
              iff (varuse wasneg) block g2012
                  (varassign (arrayaccess (varuse ret) (varuse j)) (literal (ptype char) 39)
                  (varassign (varuse j) (binop plus (varuse j) (literal (ptype int) 1))empty
              (varassign (vdecl empty empty (atype (ptype char)) ret2) (arraycreate (ptype char) (varuse j))
              block g2017
                for (varassign (varuse i) (literal (ptype int) 0) (binop lt (varuse i) (varuse j)) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
                  block g2013
                    (varassign (arrayaccess (varuse ret2) (varuse i)) (arrayaccess (varuse ret) (binop minus (binop minus (varuse j) (literal (ptype int) 1)) (varuse i)))
                (return (classcreate (rtype (String)) (varuse ret2)))
    method public (static) (rtype (String)) (methoddecl valueOf (parameter (ptype short) i))
      block g2018
        (return (methodcall (ambiguous (String)) valueOf(#s((cast ast 1) () #s(ptype int) #s((varuse ast 1) () i)))))
    method public (static) (rtype (String)) (methoddecl valueOf (parameter (ptype byte) i))
      block g2019
        (return (methodcall (ambiguous (String)) valueOf(#s((cast ast 1) () #s(ptype int) #s((varuse ast 1) () i)))))
    method public (static) (rtype (String)) (methoddecl valueOf (parameter (ptype boolean) b))
      block g2020
        iff (varuse b) (return (literal (rtype (java lang String)) "true"))(return (literal (rtype (java lang String)) "false"))
    method public (static) (rtype (String)) (methoddecl valueOf (parameter (rtype (Object)) o))
      block g2021
        iff (binop eqeq (varuse o) (literal (ptype null) null)) (return (literal (rtype (java lang String)) "null"))(return (methodcall (ambiguous (o)) toStringempty))
    method public (static) (rtype (String)) (methoddecl valueOf (parameter (rtype (String)) o))
      block g2022
        iff (binop eqeq (varuse o) (literal (ptype null) null)) (return (literal (rtype (java lang String)) "null"))(return (varuse o))
    method public empty (ptype boolean) (methoddecl equals (parameter (rtype (Object)) o))
      block g2023
        iff (binop eqeq (varuse o) (literal (ptype null) null)) (return (literal (ptype boolean) #f))empty
        iff (unop not (binop instanceof (varuse o) (rtype (String)))) (return (literal (ptype boolean) #f))empty
        (return (methodcall (ambiguous (Arrays)) equals(#s((varuse ast 1) () chars) #s((fieldaccess ast 1) () #s((cast ast 1) () #s(rtype (String)) #s((varuse ast 1) () o)) chars))))
    method public empty (rtype (String)) (methoddecl substring (parameter (ptype int) i) (parameter (ptype int) j))
      block g2024
        (varassign (vdecl empty empty (ptype int) k) (literal (ptype int) 0)
        block g2026
          iff (binop lt (varuse i) (literal (ptype int) 0)) (return (literal (rtype (java lang String)) ""))empty
          iff (binop gt (varuse j) (methodcall empty lengthempty)) (return (literal (rtype (java lang String)) ""))empty
          iff (binop lt (varuse j) (varuse i)) (return (literal (rtype (java lang String)) ""))empty
          (varassign (vdecl empty empty (atype (ptype char)) ret) (arraycreate (ptype char) (binop minus (varuse j) (varuse i)))
          block g2027
            for (varassign (varuse k) (varuse i) (binop lt (varuse k) (varuse j)) (varassign (varuse k) (binop plus (varuse k) (literal (ptype int) 1))
              block g2025
                (varassign (arrayaccess (varuse ret) (binop minus (varuse k) (varuse i))) (methodcall empty charAt(#s((varuse ast 1) () k)))
            (return (classcreate (rtype (String)) (varuse ret)))
    method public empty (rtype (String)) (methoddecl trim)
      block g2028
        (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0)
        block g2031
          (varassign (vdecl empty empty (ptype int) j) (literal (ptype int) 0)
          block g2032
            for (varassign (varuse i) (literal (ptype int) 0) (binop ampamp (binop lt (varuse i) (methodcall empty lengthempty)) (binop lteq (methodcall empty charAt(#s((varuse ast 1) () i))) (literal (ptype char) 39))) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
              block g2029
            for (varassign (varuse j) (binop minus (methodcall empty lengthempty) (literal (ptype int) 1)) (binop ampamp (binop gteq (varuse j) (literal (ptype int) 0)) (binop lteq (methodcall empty charAt(#s((varuse ast 1) () j))) (literal (ptype char) 39))) (varassign (varuse j) (binop minus (varuse j) (literal (ptype int) 1))
              block g2030
            iff (binop gt (varuse i) (varuse j)) (return (literal (rtype (java lang String)) ""))(return (methodcall empty substring(#s((varuse ast 1) () i) #s((binop ast 1) () plus #s((varuse ast 1) () j) #s((literal ast 1) () #s(ptype int) 1)))))
    method public empty (ptype int) (methoddecl hashCode)
      block g2033
        (varassign (vdecl empty empty (ptype int) h) (literal (ptype int) 0)
        block g2035
          for (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0) (binop lt (varuse i) (ambiguous (chars length))) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
            block g2034
              (varassign (varuse h) (binop plus (binop star (literal (ptype int) 31) (varuse h)) (arrayaccess (varuse chars) (varuse i)))
          (return (varuse h))
    method public empty (rtype (String)) (methoddecl toString)
      block g2036
        (return (this empty))
    method public empty (ptype int) (methoddecl compareTo (parameter (rtype (Object)) other))
      block g2037
        (return (methodcall empty compareTo(#s((cast ast 1) () #s(rtype (String)) #s((varuse ast 1) () other)))))
    method public empty (ptype int) (methoddecl compareTo (parameter (rtype (String)) other))
      block g2038
        (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0)
        block g2040
          (varassign (vdecl empty empty (ptype boolean) b) (literal (ptype boolean) #t)
          block g2041
            while (varuse b)
              block g2039
                iff (binop ampamp (binop gteq (varuse i) (ambiguous (chars length))) (binop gteq (varuse i) (ambiguous (other chars length)))) (return (literal (ptype int) 0))empty
                iff (binop gteq (varuse i) (ambiguous (chars length))) (return (unop minus (literal (ptype int) 1)))empty
                iff (binop gteq (varuse i) (ambiguous (other chars length))) (return (literal (ptype int) 1))empty
                iff (binop lt (arrayaccess (varuse chars) (varuse i)) (arrayaccess (ambiguous (other chars)) (varuse i))) (return (unop minus (literal (ptype int) 1)))empty
                iff (binop gt (arrayaccess (varuse chars) (varuse i)) (arrayaccess (ambiguous (other chars)) (varuse i))) (return (literal (ptype int) 1))empty
            (return (literal (ptype int) 0))
    method public empty (atype (ptype char)) (methoddecl toCharArray)
      block g2042
        (varassign (vdecl empty empty (atype (ptype char)) ret) (arraycreate (ptype char) (ambiguous (chars length)))
        block g2044
          for (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0) (binop lt (varuse i) (ambiguous (ret length))) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
            block g2043
              (varassign (arrayaccess (varuse ret) (varuse i)) (arrayaccess (varuse chars) (varuse i))
          (return (varuse ret))
    method public empty (ptype int) (methoddecl indexOf (parameter (rtype (String)) needle))
      block g2045
        (varassign (vdecl empty empty (ptype int) offset) (literal (ptype int) 0)
        block g2049
          (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0)
          block g2050
            for (varassign (varuse offset) (literal (ptype int) 0) (binop lt (varuse offset) (methodcall empty lengthempty)) (varassign (varuse offset) (binop plus (varuse offset) (literal (ptype int) 1))
              block g2046
                (varassign (vdecl empty empty (ptype boolean) found) (literal (ptype boolean) #t)
                block g2048
                  for (varassign (varuse i) (literal (ptype int) 0) (binop lt (varuse i) (methodcall (ambiguous (needle)) lengthempty)) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
                    block g2047
                      iff (binop gteq (binop plus (varuse i) (varuse offset)) (methodcall empty lengthempty)) (varassign (varuse found) (literal (ptype boolean) #f)iff (binop noteq (arrayaccess (varuse chars) (binop plus (varuse i) (varuse offset))) (arrayaccess (ambiguous (needle chars)) (varuse i))) (varassign (varuse found) (literal (ptype boolean) #f)empty
                  iff (varuse found) (return (varuse offset))empty
            (return (unop minus (literal (ptype int) 1)))
================ AST ================
c-unit
  (java lang)
  (pimport (java lang))
  (cimport (java io PrintStream))
  class public empty System empty empty
  block g2051
    (varassign (vdecl public static (rtype (PrintStream)) out) (classcreate (rtype (PrintStream)))
    method public (static) (ptype void) (methoddecl gc)
      block g2052
    constructor public (methoddecl System)
      block g2053
================ AST ================
c-unit
  (java util)
  (pimport (java lang))
  class public empty Arrays empty empty
  block g2054
    constructor public (methoddecl Arrays)
      block g2055
    method public (static) (ptype boolean) (methoddecl equals (parameter (atype (ptype boolean)) a1) (parameter (atype (ptype boolean)) a2))
      block g2056
        iff (binop noteq (ambiguous (a1 length)) (ambiguous (a2 length))) (return (literal (ptype boolean) #f))empty
        for (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0) (binop lt (varuse i) (ambiguous (a1 length))) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
          block g2057
            iff (binop noteq (arrayaccess (varuse a1) (varuse i)) (arrayaccess (varuse a2) (varuse i))) (return (literal (ptype boolean) #f))empty
        (return (literal (ptype boolean) #t))
    method public (static) (ptype boolean) (methoddecl equals (parameter (atype (ptype char)) a1) (parameter (atype (ptype char)) a2))
      block g2058
        iff (binop noteq (ambiguous (a1 length)) (ambiguous (a2 length))) (return (literal (ptype boolean) #f))empty
        for (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0) (binop lt (varuse i) (ambiguous (a1 length))) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
          block g2059
            iff (binop noteq (arrayaccess (varuse a1) (varuse i)) (arrayaccess (varuse a2) (varuse i))) (return (literal (ptype boolean) #f))empty
        (return (literal (ptype boolean) #t))
============== Type Linker ==============
############ LINKING NAMES IN CLASS: (statictest) ############
############ LINKING NAMES IN CLASS: (java io OutputStream) ############
############ LINKING NAMES IN CLASS: (java io PrintStream) ############
Looking for (OutputStream) in (((PrintStream) #<procedure:const>) ((OutputStream) #<procedure:const>) ((PrintStream) #<procedure:const>) ((Serializable) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((PrintStream) #<procedure:const>) ((OutputStream) #<procedure:const>) ((PrintStream) #<procedure:const>) ((Serializable) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (java lang String) in (((statictest) #<procedure:const>) ((java io OutputStream) #<procedure:const>) ((java io PrintStream) #<procedure:const>) ((java io Serializable) #<procedure:const>) ((java lang Boolean) #<procedure:const>) ((java lang Byte) #<procedure:const>) ((java lang Character) #<procedure:const>) ((java lang Class) #<procedure:const>) ((java lang Cloneable) #<procedure:const>) ((java lang Integer) #<procedure:const>) ((java lang Number) #<procedure:const>) ((java lang Object) #<procedure:const>) ((java lang Short) #<procedure:const>) ((java lang String) #<procedure:const>) ((java lang System) #<procedure:const>) ((java util Arrays) #<procedure:const>))
Looking for (String) in (((PrintStream) #<procedure:const>) ((OutputStream) #<procedure:const>) ((PrintStream) #<procedure:const>) ((Serializable) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (Object) in (((PrintStream) #<procedure:const>) ((OutputStream) #<procedure:const>) ((PrintStream) #<procedure:const>) ((Serializable) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (Object) in (((PrintStream) #<procedure:const>) ((OutputStream) #<procedure:const>) ((PrintStream) #<procedure:const>) ((Serializable) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
############ LINKING NAMES IN CLASS: (java io Serializable) ############
############ LINKING NAMES IN CLASS: (java lang Boolean) ############
Looking for (String) in (((Boolean) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
############ LINKING NAMES IN CLASS: (java lang Byte) ############
Looking for (String) in (((Byte) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
############ LINKING NAMES IN CLASS: (java lang Character) ############
Looking for (String) in (((Character) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
############ LINKING NAMES IN CLASS: (java lang Class) ############
############ LINKING NAMES IN CLASS: (java lang Cloneable) ############
############ LINKING NAMES IN CLASS: (java lang Integer) ############
Looking for (Number) in (((Integer) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((Integer) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((Integer) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((Integer) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
############ LINKING NAMES IN CLASS: (java lang Number) ############
############ LINKING NAMES IN CLASS: (java lang Object) ############
Looking for (Object) in (((Object) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((Object) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (java lang String) in (((statictest) #<procedure:const>) ((java io OutputStream) #<procedure:const>) ((java io PrintStream) #<procedure:const>) ((java io Serializable) #<procedure:const>) ((java lang Boolean) #<procedure:const>) ((java lang Byte) #<procedure:const>) ((java lang Character) #<procedure:const>) ((java lang Class) #<procedure:const>) ((java lang Cloneable) #<procedure:const>) ((java lang Integer) #<procedure:const>) ((java lang Number) #<procedure:const>) ((java lang Object) #<procedure:const>) ((java lang Short) #<procedure:const>) ((java lang String) #<procedure:const>) ((java lang System) #<procedure:const>) ((java util Arrays) #<procedure:const>))
Looking for (Object) in (((Object) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (Class) in (((Object) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
############ LINKING NAMES IN CLASS: (java lang Short) ############
Looking for (Number) in (((Short) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((Short) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
############ LINKING NAMES IN CLASS: (java lang String) ############
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (java lang String) in (((statictest) #<procedure:const>) ((java io OutputStream) #<procedure:const>) ((java io PrintStream) #<procedure:const>) ((java io Serializable) #<procedure:const>) ((java lang Boolean) #<procedure:const>) ((java lang Byte) #<procedure:const>) ((java lang Character) #<procedure:const>) ((java lang Class) #<procedure:const>) ((java lang Cloneable) #<procedure:const>) ((java lang Integer) #<procedure:const>) ((java lang Number) #<procedure:const>) ((java lang Object) #<procedure:const>) ((java lang Short) #<procedure:const>) ((java lang String) #<procedure:const>) ((java lang System) #<procedure:const>) ((java util Arrays) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (java lang String) in (((statictest) #<procedure:const>) ((java io OutputStream) #<procedure:const>) ((java io PrintStream) #<procedure:const>) ((java io Serializable) #<procedure:const>) ((java lang Boolean) #<procedure:const>) ((java lang Byte) #<procedure:const>) ((java lang Character) #<procedure:const>) ((java lang Class) #<procedure:const>) ((java lang Cloneable) #<procedure:const>) ((java lang Integer) #<procedure:const>) ((java lang Number) #<procedure:const>) ((java lang Object) #<procedure:const>) ((java lang Short) #<procedure:const>) ((java lang String) #<procedure:const>) ((java lang System) #<procedure:const>) ((java util Arrays) #<procedure:const>))
Looking for (java lang String) in (((statictest) #<procedure:const>) ((java io OutputStream) #<procedure:const>) ((java io PrintStream) #<procedure:const>) ((java io Serializable) #<procedure:const>) ((java lang Boolean) #<procedure:const>) ((java lang Byte) #<procedure:const>) ((java lang Character) #<procedure:const>) ((java lang Class) #<procedure:const>) ((java lang Cloneable) #<procedure:const>) ((java lang Integer) #<procedure:const>) ((java lang Number) #<procedure:const>) ((java lang Object) #<procedure:const>) ((java lang Short) #<procedure:const>) ((java lang String) #<procedure:const>) ((java lang System) #<procedure:const>) ((java util Arrays) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (Object) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (java lang String) in (((statictest) #<procedure:const>) ((java io OutputStream) #<procedure:const>) ((java io PrintStream) #<procedure:const>) ((java io Serializable) #<procedure:const>) ((java lang Boolean) #<procedure:const>) ((java lang Byte) #<procedure:const>) ((java lang Character) #<procedure:const>) ((java lang Class) #<procedure:const>) ((java lang Cloneable) #<procedure:const>) ((java lang Integer) #<procedure:const>) ((java lang Number) #<procedure:const>) ((java lang Object) #<procedure:const>) ((java lang Short) #<procedure:const>) ((java lang String) #<procedure:const>) ((java lang System) #<procedure:const>) ((java util Arrays) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (java lang String) in (((statictest) #<procedure:const>) ((java io OutputStream) #<procedure:const>) ((java io PrintStream) #<procedure:const>) ((java io Serializable) #<procedure:const>) ((java lang Boolean) #<procedure:const>) ((java lang Byte) #<procedure:const>) ((java lang Character) #<procedure:const>) ((java lang Class) #<procedure:const>) ((java lang Cloneable) #<procedure:const>) ((java lang Integer) #<procedure:const>) ((java lang Number) #<procedure:const>) ((java lang Object) #<procedure:const>) ((java lang Short) #<procedure:const>) ((java lang String) #<procedure:const>) ((java lang System) #<procedure:const>) ((java util Arrays) #<procedure:const>))
Looking for (Object) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (java lang String) in (((statictest) #<procedure:const>) ((java io OutputStream) #<procedure:const>) ((java io PrintStream) #<procedure:const>) ((java io Serializable) #<procedure:const>) ((java lang Boolean) #<procedure:const>) ((java lang Byte) #<procedure:const>) ((java lang Character) #<procedure:const>) ((java lang Class) #<procedure:const>) ((java lang Cloneable) #<procedure:const>) ((java lang Integer) #<procedure:const>) ((java lang Number) #<procedure:const>) ((java lang Object) #<procedure:const>) ((java lang Short) #<procedure:const>) ((java lang String) #<procedure:const>) ((java lang System) #<procedure:const>) ((java util Arrays) #<procedure:const>))
Looking for (java lang String) in (((statictest) #<procedure:const>) ((java io OutputStream) #<procedure:const>) ((java io PrintStream) #<procedure:const>) ((java io Serializable) #<procedure:const>) ((java lang Boolean) #<procedure:const>) ((java lang Byte) #<procedure:const>) ((java lang Character) #<procedure:const>) ((java lang Class) #<procedure:const>) ((java lang Cloneable) #<procedure:const>) ((java lang Integer) #<procedure:const>) ((java lang Number) #<procedure:const>) ((java lang Object) #<procedure:const>) ((java lang Short) #<procedure:const>) ((java lang String) #<procedure:const>) ((java lang System) #<procedure:const>) ((java util Arrays) #<procedure:const>))
Looking for (java lang String) in (((statictest) #<procedure:const>) ((java io OutputStream) #<procedure:const>) ((java io PrintStream) #<procedure:const>) ((java io Serializable) #<procedure:const>) ((java lang Boolean) #<procedure:const>) ((java lang Byte) #<procedure:const>) ((java lang Character) #<procedure:const>) ((java lang Class) #<procedure:const>) ((java lang Cloneable) #<procedure:const>) ((java lang Integer) #<procedure:const>) ((java lang Number) #<procedure:const>) ((java lang Object) #<procedure:const>) ((java lang Short) #<procedure:const>) ((java lang String) #<procedure:const>) ((java lang System) #<procedure:const>) ((java util Arrays) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (java lang String) in (((statictest) #<procedure:const>) ((java io OutputStream) #<procedure:const>) ((java io PrintStream) #<procedure:const>) ((java io Serializable) #<procedure:const>) ((java lang Boolean) #<procedure:const>) ((java lang Byte) #<procedure:const>) ((java lang Character) #<procedure:const>) ((java lang Class) #<procedure:const>) ((java lang Cloneable) #<procedure:const>) ((java lang Integer) #<procedure:const>) ((java lang Number) #<procedure:const>) ((java lang Object) #<procedure:const>) ((java lang Short) #<procedure:const>) ((java lang String) #<procedure:const>) ((java lang System) #<procedure:const>) ((java util Arrays) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (Object) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (String) in (((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
############ LINKING NAMES IN CLASS: (java lang System) ############
Looking for (PrintStream) in (((System) #<procedure:const>) ((PrintStream) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Looking for (PrintStream) in (((System) #<procedure:const>) ((PrintStream) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
############ LINKING NAMES IN CLASS: (java util Arrays) ############

============== Environments ==============
Types

Vars

Constructors

Methods
VAR: x
Types

Vars

Constructors

Methods
VAR: value
Types
(toString(), #s(rtype (java lang String)))
(value, #s(ptype boolean))

Vars
(value, g1950)

Constructors
((), g1950)
((#s(ptype boolean)), g1950)

Methods
(toString(), g1950)
VAR: MAX_VALUE
Types

Vars

Constructors

Methods
VAR: value
Types
(toString(), #s(rtype (java lang String)))
(value, #s(ptype byte))

Vars
(value, g1954)

Constructors
((), g1954)
((#s(ptype byte)), g1954)

Methods
(toString(), g1954)
VAR: MAX_VALUE
Types

Vars

Constructors

Methods
VAR: value
Types

Vars

Constructors

Methods
VAR: value
Types
(toString(), #s(rtype (java lang String)))
(parseInt(#s(rtype (java lang String))), #s(ptype int))
(intValue(), #s(ptype int))
(value, #s(ptype int))

Vars
(value, g1965)

Constructors
((), g1965)
((#s(rtype (java lang String))), g1965)
((#s(ptype int)), g1965)

Methods
(toString(), g1965)
(parseInt(#s(rtype (java lang String))), g1965)
(intValue(), g1965)
VAR: MAX_VALUE
Types

Vars

Constructors

Methods
VAR: value
Types

Vars

Constructors

Methods
VAR: chars
Types

Vars

Constructors

Methods
VAR: out

============== Heirarchy Checker ==========
Types
(test(), #s(ptype int))

Vars

Constructors
((), g126)

Methods
(test(), g126)
VAR: x
ADDING TYPEF!
Types
(x, #s(ftype #s(ptype int)))
(test(), #s(ptype int))

Vars
(x, g126)

Constructors
((), g126)

Methods
(test(), g126)
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang String))
Types
(toString(), #s(rtype (java lang String)))

Vars

Constructors
((), g1950)
((#s(ptype boolean)), g1950)

Methods
(toString(), g1950)
VAR: value
Types
(value, #s(ptype boolean))
(toString(), #s(rtype (java lang String)))

Vars
(value, g1950)

Constructors
((), g1950)
((#s(ptype boolean)), g1950)

Methods
(toString(), g1950)
VAR: MAX_VALUE
ADDING TYPEF!
Types
(MAX_VALUE, #s(ftype #s(ptype byte)))
(value, #s(ptype boolean))
(toString(), #s(rtype (java lang String)))

Vars
(MAX_VALUE, g1950)
(value, g1950)

Constructors
((), g1950)
((#s(ptype boolean)), g1950)

Methods
(toString(), g1950)
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang String))
Types
(toString(), #s(rtype (java lang String)))

Vars

Constructors
((), g1954)
((#s(ptype byte)), g1954)

Methods
(toString(), g1954)
VAR: value
Types
(value, #s(ptype byte))
(toString(), #s(rtype (java lang String)))

Vars
(value, g1954)

Constructors
((), g1954)
((#s(ptype byte)), g1954)

Methods
(toString(), g1954)
VAR: MAX_VALUE
ADDING TYPEF!
Types
(MAX_VALUE, #s(ftype #s(ptype byte)))
(value, #s(ptype byte))
(toString(), #s(rtype (java lang String)))

Vars
(MAX_VALUE, g1954)
(value, g1954)

Constructors
((), g1954)
((#s(ptype byte)), g1954)

Methods
(toString(), g1954)
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang String))
Types
(toString(), #s(rtype (java lang String)))

Vars

Constructors
((), g1958)
((#s(ptype char)), g1958)

Methods
(toString(), g1958)
VAR: value
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang String))
Types
(toString(), #s(rtype (java lang String)))
(parseInt(#s(rtype (java lang String))), #s(ptype int))
(intValue(), #s(ptype int))

Vars

Constructors
((), g1965)
((#s(rtype (java lang String))), g1965)
((#s(ptype int)), g1965)

Methods
(toString(), g1965)
(parseInt(#s(rtype (java lang String))), g1965)
(intValue(), g1965)
VAR: value
Types
(value, #s(ptype int))
(toString(), #s(rtype (java lang String)))
(parseInt(#s(rtype (java lang String))), #s(ptype int))
(intValue(), #s(ptype int))

Vars
(value, g1965)

Constructors
((), g1965)
((#s(rtype (java lang String))), g1965)
((#s(ptype int)), g1965)

Methods
(toString(), g1965)
(parseInt(#s(rtype (java lang String))), g1965)
(intValue(), g1965)
VAR: MAX_VALUE
ADDING TYPEF!
Types
(MAX_VALUE, #s(ftype #s(ptype int)))
(value, #s(ptype int))
(toString(), #s(rtype (java lang String)))
(parseInt(#s(rtype (java lang String))), #s(ptype int))
(intValue(), #s(ptype int))

Vars
(MAX_VALUE, g1965)
(value, g1965)

Constructors
((), g1965)
((#s(rtype (java lang String))), g1965)
((#s(ptype int)), g1965)

Methods
(toString(), g1965)
(parseInt(#s(rtype (java lang String))), g1965)
(intValue(), g1965)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang String))
Types
(toString(), #s(rtype (java lang String)))
(intValue(), #s(ptype int))

Vars

Constructors
((), g1987)
((#s(ptype short)), g1987)

Methods
(toString(), g1987)
(intValue(), g1987)
VAR: value
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang String))
type-ast=? #s(ptype boolean) #s(ptype boolean)
Types
(indexOf(#s(rtype (java lang String))), #s(ptype int))
(toCharArray(), #s(atype #s(ptype char)))
(compareTo(#s(rtype (java lang String))), #s(ptype int))
(compareTo(#s(rtype (java lang Object))), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(hashCode(), #s(ptype int))
(trim(), #s(rtype (java lang String)))
(substring(#s(ptype int) #s(ptype int)), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))
(valueOf(#s(rtype (java lang String))), #s(rtype (java lang String)))
(valueOf(#s(rtype (java lang Object))), #s(rtype (java lang String)))
(valueOf(#s(ptype boolean)), #s(rtype (java lang String)))
(valueOf(#s(ptype byte)), #s(rtype (java lang String)))
(valueOf(#s(ptype short)), #s(rtype (java lang String)))
(valueOf(#s(ptype int)), #s(rtype (java lang String)))
(valueOf(#s(ptype char)), #s(rtype (java lang String)))
(concat(#s(rtype (java lang String))), #s(rtype (java lang String)))
(charAt(#s(ptype int)), #s(ptype char))
(length(), #s(ptype int))

Vars

Constructors
((#s(rtype (java lang String))), g1992)
((#s(atype #s(ptype char))), g1992)
((), g1992)

Methods
(indexOf(#s(rtype (java lang String))), g1992)
(toCharArray(), g1992)
(compareTo(#s(rtype (java lang String))), g1992)
(compareTo(#s(rtype (java lang Object))), g1992)
(toString(), g1992)
(hashCode(), g1992)
(trim(), g1992)
(substring(#s(ptype int) #s(ptype int)), g1992)
(equals(#s(rtype (java lang Object))), g1992)
(valueOf(#s(rtype (java lang String))), g1992)
(valueOf(#s(rtype (java lang Object))), g1992)
(valueOf(#s(ptype boolean)), g1992)
(valueOf(#s(ptype byte)), g1992)
(valueOf(#s(ptype short)), g1992)
(valueOf(#s(ptype int)), g1992)
(valueOf(#s(ptype char)), g1992)
(concat(#s(rtype (java lang String))), g1992)
(charAt(#s(ptype int)), g1992)
(length(), g1992)
VAR: chars
Types
(gc(), #s(ptype void))

Vars

Constructors
((), g2051)

Methods
(gc(), g2051)
VAR: out
ADDING TYPEF!
Types
(out, #s(ftype #s(rtype (java io PrintStream))))
(gc(), #s(ptype void))

Vars
(out, g2051)

Constructors
((), g2051)

Methods
(gc(), g2051)

=====================Local Environment Generation=========================
Types

Vars

Constructors

Methods
VAR: y
ADDING TYPEF!
Types
(y, #s(ftype #s(ptype int)))

Vars
(y, g128)

Constructors

Methods
Types

Vars

Constructors

Methods
VAR: c
Types

Vars

Constructors

Methods
VAR: b
Types

Vars

Constructors

Methods
VAR: b
Types

Vars

Constructors

Methods
VAR: s
Types
(s, #s(rtype (java lang String)))

Vars
(s, g1933)

Constructors

Methods
VAR: i
ADDING TYPEF!
Types
(i, #s(ftype #s(ptype int)))
(s, #s(rtype (java lang String)))

Vars
(i, g1934)
(s, g1933)

Constructors

Methods
Types

Vars

Constructors

Methods
VAR: s
Types

Vars

Constructors

Methods
VAR: b
Types

Vars

Constructors

Methods
VAR: b
Types

Vars

Constructors

Methods
VAR: b
Types

Vars

Constructors

Methods
VAR: b
Types

Vars

Constructors

Methods
VAR: b
Types

Vars

Constructors

Methods
VAR: b
Types

Vars

Constructors

Methods
VAR: b
Types

Vars

Constructors

Methods
VAR: b
Types

Vars

Constructors

Methods
VAR: b
Types

Vars

Constructors

Methods
VAR: b
Types

Vars

Constructors

Methods
VAR: b
Types

Vars

Constructors

Methods
VAR: b
Types

Vars

Constructors

Methods
VAR: i
Types

Vars

Constructors

Methods
VAR: i
Types

Vars

Constructors

Methods
VAR: i
Types

Vars

Constructors

Methods
VAR: i
Types

Vars

Constructors

Methods
VAR: s
Types
(s, #s(rtype (java lang String)))

Vars
(s, g1968)

Constructors

Methods
VAR: ret
ADDING TYPEF!
Types
(ret, #s(ftype #s(ptype int)))
(s, #s(rtype (java lang String)))

Vars
(ret, g1968)
(s, g1968)

Constructors

Methods
Types
(ret, #s(ptype int))
(s, #s(rtype (java lang String)))

Vars
(ret, g1968)
(s, g1968)

Constructors

Methods
VAR: neg
ADDING TYPEF!
Types
(neg, #s(ftype #s(ptype boolean)))
(ret, #s(ptype int))
(s, #s(rtype (java lang String)))

Vars
(neg, g1971)
(ret, g1968)
(s, g1968)

Constructors

Methods
Types
(neg, #s(ptype boolean))
(ret, #s(ptype int))
(s, #s(rtype (java lang String)))

Vars
(neg, g1971)
(ret, g1968)
(s, g1968)

Constructors

Methods
VAR: i
ADDING TYPEF!
Types
(i, #s(ftype #s(ptype int)))
(neg, #s(ptype boolean))
(ret, #s(ptype int))
(s, #s(rtype (java lang String)))

Vars
(i, g1972)
(neg, g1971)
(ret, g1968)
(s, g1968)

Constructors

Methods
Types

Vars

Constructors

Methods
VAR: s
Types

Vars

Constructors

Methods
VAR: other
Types

Vars

Constructors

Methods
VAR: i
Types

Vars

Constructors

Methods
VAR: i
Types

Vars

Constructors

Methods
VAR: chars
Types
(chars, #s(atype #s(ptype char)))

Vars
(chars, g1996)

Constructors

Methods
VAR: i
ADDING TYPEF!
Types
(i, #s(ftype #s(ptype int)))
(chars, #s(atype #s(ptype char)))

Vars
(i, g1997)
(chars, g1996)

Constructors

Methods
Types

Vars

Constructors

Methods
VAR: other
Types

Vars

Constructors

Methods
VAR: s2
Types
(s2, #s(rtype (java lang String)))

Vars
(s2, g1999)

Constructors

Methods
VAR: i
ADDING TYPEF!
Types
(i, #s(ftype #s(ptype int)))
(s2, #s(rtype (java lang String)))

Vars
(i, g1999)
(s2, g1999)

Constructors

Methods
Types
(i, #s(ptype int))
(s2, #s(rtype (java lang String)))

Vars
(i, g1999)
(s2, g1999)

Constructors

Methods
VAR: newchars
ADDING TYPEF!
Types
(newchars, #s(ftype #s(atype #s(ptype char))))
(i, #s(ptype int))
(s2, #s(rtype (java lang String)))

Vars
(newchars, g2002)
(i, g1999)
(s2, g1999)

Constructors

Methods
Types

Vars

Constructors

Methods
VAR: c
Types
(c, #s(ptype char))

Vars
(c, g2004)

Constructors

Methods
VAR: newchars
ADDING TYPEF!
Types
(newchars, #s(ftype #s(atype #s(ptype char))))
(c, #s(ptype char))

Vars
(newchars, g2004)
(c, g2004)

Constructors

Methods
Types

Vars

Constructors

Methods
VAR: i
Types
(i, #s(ptype int))

Vars
(i, g2006)

Constructors

Methods
VAR: ret
ADDING TYPEF!
Types
(ret, #s(ftype #s(atype #s(ptype char))))
(i, #s(ptype int))

Vars
(ret, g2006)
(i, g2006)

Constructors

Methods
Types
(ret, #s(atype #s(ptype char)))
(i, #s(ptype int))

Vars
(ret, g2006)
(i, g2006)

Constructors

Methods
VAR: j
ADDING TYPEF!
Types
(j, #s(ftype #s(ptype int)))
(ret, #s(atype #s(ptype char)))
(i, #s(ptype int))

Vars
(j, g2014)
(ret, g2006)
(i, g2006)

Constructors

Methods
Types
(j, #s(ptype int))
(ret, #s(atype #s(ptype char)))
(i, #s(ptype int))

Vars
(j, g2014)
(ret, g2006)
(i, g2006)

Constructors

Methods
VAR: wasneg
ADDING TYPEF!
Types
(wasneg, #s(ftype #s(ptype boolean)))
(j, #s(ptype int))
(ret, #s(atype #s(ptype char)))
(i, #s(ptype int))

Vars
(wasneg, g2015)
(j, g2014)
(ret, g2006)
(i, g2006)

Constructors

Methods
Types
(wasneg, #s(ptype boolean))
(j, #s(ptype int))
(ret, #s(atype #s(ptype char)))
(i, #s(ptype int))

Vars
(wasneg, g2015)
(j, g2014)
(ret, g2006)
(i, g2006)

Constructors

Methods
VAR: d
ADDING TYPEF!
Types
(d, #s(ftype #s(ptype int)))
(wasneg, #s(ptype boolean))
(j, #s(ptype int))
(ret, #s(atype #s(ptype char)))
(i, #s(ptype int))

Vars
(d, g2010)
(wasneg, g2015)
(j, g2014)
(ret, g2006)
(i, g2006)

Constructors

Methods
Types
(wasneg, #s(ptype boolean))
(j, #s(ptype int))
(ret, #s(atype #s(ptype char)))
(i, #s(ptype int))

Vars
(wasneg, g2015)
(j, g2014)
(ret, g2006)
(i, g2006)

Constructors

Methods
VAR: ret2
ADDING TYPEF!
Types
(ret2, #s(ftype #s(atype #s(ptype char))))
(wasneg, #s(ptype boolean))
(j, #s(ptype int))
(ret, #s(atype #s(ptype char)))
(i, #s(ptype int))

Vars
(ret2, g2016)
(wasneg, g2015)
(j, g2014)
(ret, g2006)
(i, g2006)

Constructors

Methods
Types

Vars

Constructors

Methods
VAR: i
Types

Vars

Constructors

Methods
VAR: i
Types

Vars

Constructors

Methods
VAR: b
Types

Vars

Constructors

Methods
VAR: o
Types

Vars

Constructors

Methods
VAR: o
Types

Vars

Constructors

Methods
VAR: o
Types

Vars

Constructors

Methods
VAR: i
Types
(i, #s(ptype int))

Vars
(i, g2024)

Constructors

Methods
VAR: j
Types
(j, #s(ptype int))
(i, #s(ptype int))

Vars
(j, g2024)
(i, g2024)

Constructors

Methods
VAR: k
ADDING TYPEF!
Types
(k, #s(ftype #s(ptype int)))
(j, #s(ptype int))
(i, #s(ptype int))

Vars
(k, g2024)
(j, g2024)
(i, g2024)

Constructors

Methods
Types
(k, #s(ptype int))
(j, #s(ptype int))
(i, #s(ptype int))

Vars
(k, g2024)
(j, g2024)
(i, g2024)

Constructors

Methods
VAR: ret
ADDING TYPEF!
Types
(ret, #s(ftype #s(atype #s(ptype char))))
(k, #s(ptype int))
(j, #s(ptype int))
(i, #s(ptype int))

Vars
(ret, g2026)
(k, g2024)
(j, g2024)
(i, g2024)

Constructors

Methods
Types

Vars

Constructors

Methods
VAR: i
ADDING TYPEF!
Types
(i, #s(ftype #s(ptype int)))

Vars
(i, g2028)

Constructors

Methods
Types
(i, #s(ptype int))

Vars
(i, g2028)

Constructors

Methods
VAR: j
ADDING TYPEF!
Types
(j, #s(ftype #s(ptype int)))
(i, #s(ptype int))

Vars
(j, g2031)
(i, g2028)

Constructors

Methods
Types

Vars

Constructors

Methods
VAR: h
ADDING TYPEF!
Types
(h, #s(ftype #s(ptype int)))

Vars
(h, g2033)

Constructors

Methods
Types
(h, #s(ptype int))

Vars
(h, g2033)

Constructors

Methods
VAR: i
ADDING TYPEF!
Types
(i, #s(ftype #s(ptype int)))
(h, #s(ptype int))

Vars
(i, g2034)
(h, g2033)

Constructors

Methods
Types

Vars

Constructors

Methods
VAR: other
Types

Vars

Constructors

Methods
VAR: other
Types
(other, #s(rtype (java lang String)))

Vars
(other, g2038)

Constructors

Methods
VAR: i
ADDING TYPEF!
Types
(i, #s(ftype #s(ptype int)))
(other, #s(rtype (java lang String)))

Vars
(i, g2038)
(other, g2038)

Constructors

Methods
Types
(i, #s(ptype int))
(other, #s(rtype (java lang String)))

Vars
(i, g2038)
(other, g2038)

Constructors

Methods
VAR: b
ADDING TYPEF!
Types
(b, #s(ftype #s(ptype boolean)))
(i, #s(ptype int))
(other, #s(rtype (java lang String)))

Vars
(b, g2040)
(i, g2038)
(other, g2038)

Constructors

Methods
Types

Vars

Constructors

Methods
VAR: ret
ADDING TYPEF!
Types
(ret, #s(ftype #s(atype #s(ptype char))))

Vars
(ret, g2042)

Constructors

Methods
Types
(ret, #s(atype #s(ptype char)))

Vars
(ret, g2042)

Constructors

Methods
VAR: i
ADDING TYPEF!
Types
(i, #s(ftype #s(ptype int)))
(ret, #s(atype #s(ptype char)))

Vars
(i, g2043)
(ret, g2042)

Constructors

Methods
Types

Vars

Constructors

Methods
VAR: needle
Types
(needle, #s(rtype (java lang String)))

Vars
(needle, g2045)

Constructors

Methods
VAR: offset
ADDING TYPEF!
Types
(offset, #s(ftype #s(ptype int)))
(needle, #s(rtype (java lang String)))

Vars
(offset, g2045)
(needle, g2045)

Constructors

Methods
Types
(offset, #s(ptype int))
(needle, #s(rtype (java lang String)))

Vars
(offset, g2045)
(needle, g2045)

Constructors

Methods
VAR: i
ADDING TYPEF!
Types
(i, #s(ftype #s(ptype int)))
(offset, #s(ptype int))
(needle, #s(rtype (java lang String)))

Vars
(i, g2049)
(offset, g2045)
(needle, g2045)

Constructors

Methods
Types
(i, #s(ptype int))
(offset, #s(ptype int))
(needle, #s(rtype (java lang String)))

Vars
(i, g2049)
(offset, g2045)
(needle, g2045)

Constructors

Methods
VAR: found
ADDING TYPEF!
Types
(found, #s(ftype #s(ptype boolean)))
(i, #s(ptype int))
(offset, #s(ptype int))
(needle, #s(rtype (java lang String)))

Vars
(found, g2046)
(i, g2049)
(offset, g2045)
(needle, g2045)

Constructors

Methods
Types

Vars

Constructors

Methods
VAR: a1
Types
(a1, #s(atype #s(ptype boolean)))

Vars
(a1, g2056)

Constructors

Methods
VAR: a2
Types
(a2, #s(atype #s(ptype boolean)))
(a1, #s(atype #s(ptype boolean)))

Vars
(a2, g2056)
(a1, g2056)

Constructors

Methods
VAR: i
ADDING TYPEF!
Types
(i, #s(ftype #s(ptype int)))
(a2, #s(atype #s(ptype boolean)))
(a1, #s(atype #s(ptype boolean)))

Vars
(i, g2057)
(a2, g2056)
(a1, g2056)

Constructors

Methods
Types

Vars

Constructors

Methods
VAR: a1
Types
(a1, #s(atype #s(ptype char)))

Vars
(a1, g2058)

Constructors

Methods
VAR: a2
Types
(a2, #s(atype #s(ptype char)))
(a1, #s(atype #s(ptype char)))

Vars
(a2, g2058)
(a1, g2058)

Constructors

Methods
VAR: i
ADDING TYPEF!
Types
(i, #s(ftype #s(ptype int)))
(a2, #s(atype #s(ptype char)))
(a1, #s(atype #s(ptype char)))

Vars
(i, g2059)
(a2, g2058)
(a1, g2058)

Constructors

Methods
========== CINFO FOR statictest ==========
Types
(test(), #s(ptype int))
(x, #s(ptype int))
(statictest, #s(rtype (statictest)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars
(x, g126)

Constructors
((), g126)

Methods
(test(), g126)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)
========== CINFO FOR java.io.OutputStream ==========
Types
(flush(), #s(ptype void))
(nativeWrite(#s(ptype int)), #s(ptype int))
(write(#s(ptype int)), #s(ptype void))
(write(#s(ptype char)), #s(ptype void))
(OutputStream, #s(rtype (java io OutputStream)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars

Constructors
((), g1925)

Methods
(flush(), g1925)
(nativeWrite(#s(ptype int)), g1925)
(write(#s(ptype int)), g1925)
(write(#s(ptype char)), g1925)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)
========== CINFO FOR java.io.PrintStream ==========
Types
(print(#s(ptype int)), #s(ptype void))
(print(#s(ptype short)), #s(ptype void))
(print(#s(ptype char)), #s(ptype void))
(print(#s(ptype byte)), #s(ptype void))
(print(#s(ptype boolean)), #s(ptype void))
(print(#s(rtype (java lang Object))), #s(ptype void))
(println(#s(ptype int)), #s(ptype void))
(println(#s(ptype short)), #s(ptype void))
(println(#s(ptype char)), #s(ptype void))
(println(#s(ptype byte)), #s(ptype void))
(println(#s(ptype boolean)), #s(ptype void))
(println(#s(rtype (java lang Object))), #s(ptype void))
(println(#s(rtype (java lang String))), #s(ptype void))
(println(), #s(ptype void))
(print(#s(rtype (java lang String))), #s(ptype void))
(PrintStream, #s(rtype (java io PrintStream)))
(flush(), #s(ptype void))
(nativeWrite(#s(ptype int)), #s(ptype int))
(write(#s(ptype int)), #s(ptype void))
(write(#s(ptype char)), #s(ptype void))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars

Constructors
((), g1931)

Methods
(print(#s(ptype int)), g1931)
(print(#s(ptype short)), g1931)
(print(#s(ptype char)), g1931)
(print(#s(ptype byte)), g1931)
(print(#s(ptype boolean)), g1931)
(print(#s(rtype (java lang Object))), g1931)
(println(#s(ptype int)), g1931)
(println(#s(ptype short)), g1931)
(println(#s(ptype char)), g1931)
(println(#s(ptype byte)), g1931)
(println(#s(ptype boolean)), g1931)
(println(#s(rtype (java lang Object))), g1931)
(println(#s(rtype (java lang String))), g1931)
(println(), g1931)
(print(#s(rtype (java lang String))), g1931)
(flush(), g1925)
(nativeWrite(#s(ptype int)), g1925)
(write(#s(ptype int)), g1925)
(write(#s(ptype char)), g1925)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)
========== CINFO FOR java.io.Serializable ==========
Types
(Serializable, #s(rtype (java io Serializable)))

Vars

Constructors

Methods
========== CINFO FOR java.lang.Boolean ==========
Types
(MAX_VALUE, #s(ptype byte))
(toString(), #s(rtype (java lang String)))
(value, #s(ptype boolean))
(Boolean, #s(rtype (java lang Boolean)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars
(MAX_VALUE, g1950)
(value, g1950)

Constructors
((), g1950)
((#s(ptype boolean)), g1950)

Methods
(toString(), g1950)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(equals(#s(rtype (java lang Object))), g1980)
========== CINFO FOR java.lang.Byte ==========
Types
(MAX_VALUE, #s(ptype byte))
(toString(), #s(rtype (java lang String)))
(value, #s(ptype byte))
(Byte, #s(rtype (java lang Byte)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars
(MAX_VALUE, g1954)
(value, g1954)

Constructors
((), g1954)
((#s(ptype byte)), g1954)

Methods
(toString(), g1954)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(equals(#s(rtype (java lang Object))), g1980)
========== CINFO FOR java.lang.Character ==========
Types
(toString(), #s(rtype (java lang String)))
(value, #s(ptype char))
(Character, #s(rtype (java lang Character)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars
(value, g1958)

Constructors
((), g1958)
((#s(ptype char)), g1958)

Methods
(toString(), g1958)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(equals(#s(rtype (java lang Object))), g1980)
========== CINFO FOR java.lang.Class ==========
Types
(Class, #s(rtype (java lang Class)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars

Constructors
((), g1962)

Methods
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)
========== CINFO FOR java.lang.Cloneable ==========
Types
(Cloneable, #s(rtype (java lang Cloneable)))

Vars

Constructors

Methods
========== CINFO FOR java.lang.Integer ==========
Types
(MAX_VALUE, #s(ptype int))
(toString(), #s(rtype (java lang String)))
(parseInt(#s(rtype (java lang String))), #s(ptype int))
(intValue(), #s(ptype int))
(value, #s(ptype int))
(Integer, #s(rtype (java lang Integer)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars
(MAX_VALUE, g1965)
(value, g1965)

Constructors
((), g1965)
((#s(rtype (java lang String))), g1965)
((#s(ptype int)), g1965)

Methods
(toString(), g1965)
(parseInt(#s(rtype (java lang String))), g1965)
(intValue(), g1965)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(equals(#s(rtype (java lang Object))), g1980)
========== CINFO FOR java.lang.Number ==========
Types
(intValue(), #s(ptype int))
(Number, #s(rtype (java lang Number)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars

Constructors
((), g1977)

Methods
(intValue(), g1977)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)
========== CINFO FOR java.lang.Object ==========
Types
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))
(Object, #s(rtype (java lang Object)))

Vars

Constructors
((), g1980)

Methods
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)
========== CINFO FOR java.lang.Short ==========
Types
(toString(), #s(rtype (java lang String)))
(intValue(), #s(ptype int))
(value, #s(ptype short))
(Short, #s(rtype (java lang Short)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars
(value, g1987)

Constructors
((), g1987)
((#s(ptype short)), g1987)

Methods
(toString(), g1987)
(intValue(), g1987)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(equals(#s(rtype (java lang Object))), g1980)
========== CINFO FOR java.lang.String ==========
Types
(indexOf(#s(rtype (java lang String))), #s(ptype int))
(toCharArray(), #s(atype #s(ptype char)))
(compareTo(#s(rtype (java lang String))), #s(ptype int))
(compareTo(#s(rtype (java lang Object))), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(hashCode(), #s(ptype int))
(trim(), #s(rtype (java lang String)))
(substring(#s(ptype int) #s(ptype int)), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))
(valueOf(#s(rtype (java lang String))), #s(rtype (java lang String)))
(valueOf(#s(rtype (java lang Object))), #s(rtype (java lang String)))
(valueOf(#s(ptype boolean)), #s(rtype (java lang String)))
(valueOf(#s(ptype byte)), #s(rtype (java lang String)))
(valueOf(#s(ptype short)), #s(rtype (java lang String)))
(valueOf(#s(ptype int)), #s(rtype (java lang String)))
(valueOf(#s(ptype char)), #s(rtype (java lang String)))
(concat(#s(rtype (java lang String))), #s(rtype (java lang String)))
(charAt(#s(ptype int)), #s(ptype char))
(length(), #s(ptype int))
(chars, #s(atype #s(ptype char)))
(String, #s(rtype (java lang String)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))

Vars
(chars, g1992)

Constructors
((#s(rtype (java lang String))), g1992)
((#s(atype #s(ptype char))), g1992)
((), g1992)

Methods
(indexOf(#s(rtype (java lang String))), g1992)
(toCharArray(), g1992)
(compareTo(#s(rtype (java lang String))), g1992)
(compareTo(#s(rtype (java lang Object))), g1992)
(toString(), g1992)
(hashCode(), g1992)
(trim(), g1992)
(substring(#s(ptype int) #s(ptype int)), g1992)
(equals(#s(rtype (java lang Object))), g1992)
(valueOf(#s(rtype (java lang String))), g1992)
(valueOf(#s(rtype (java lang Object))), g1992)
(valueOf(#s(ptype boolean)), g1992)
(valueOf(#s(ptype byte)), g1992)
(valueOf(#s(ptype short)), g1992)
(valueOf(#s(ptype int)), g1992)
(valueOf(#s(ptype char)), g1992)
(concat(#s(rtype (java lang String))), g1992)
(charAt(#s(ptype int)), g1992)
(length(), g1992)
(getClass(), g1980)
(clone(), g1980)
========== CINFO FOR java.lang.System ==========
Types
(gc(), #s(ptype void))
(out, #s(rtype (java io PrintStream)))
(System, #s(rtype (java lang System)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars
(out, g2051)

Constructors
((), g2051)

Methods
(gc(), g2051)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)
========== CINFO FOR java.util.Arrays ==========
Types
(equals(#s(atype #s(ptype char)) #s(atype #s(ptype char))), #s(ptype boolean))
(equals(#s(atype #s(ptype boolean)) #s(atype #s(ptype boolean))), #s(ptype boolean))
(Arrays, #s(rtype (java util Arrays)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars

Constructors
((), g2054)

Methods
(equals(#s(atype #s(ptype char)) #s(atype #s(ptype char))), g2054)
(equals(#s(atype #s(ptype boolean)) #s(atype #s(ptype boolean))), g2054)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)


============== Disambiguator ==========

====== DISAMBIGUATING NAMES FOR AST, class/interface: statictest ======

-----Environment
Types
(test(), #s(ptype int))
(x, #s(ptype int))
(statictest, #s(rtype (statictest)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars
(x, g126)

Constructors
((), g126)

Methods
(test(), g126)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)

-----Links
(((statictest) #<procedure:const>) ((statictest) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))

====== DISAMBIGUATING NAMES FOR AST, class/interface: java.io.OutputStream ======

-----Environment
Types
(flush(), #s(ptype void))
(nativeWrite(#s(ptype int)), #s(ptype int))
(write(#s(ptype int)), #s(ptype void))
(write(#s(ptype char)), #s(ptype void))
(OutputStream, #s(rtype (java io OutputStream)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars

Constructors
((), g1925)

Methods
(flush(), g1925)
(nativeWrite(#s(ptype int)), g1925)
(write(#s(ptype int)), g1925)
(write(#s(ptype char)), g1925)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)

-----Links
(((OutputStream) #<procedure:const>) ((OutputStream) #<procedure:const>) ((PrintStream) #<procedure:const>) ((Serializable) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Disambiguated: (PrintStream) to #s(rtype (java io PrintStream))

====== DISAMBIGUATING NAMES FOR AST, class/interface: java.io.PrintStream ======

-----Environment
Types
(print(#s(ptype int)), #s(ptype void))
(print(#s(ptype short)), #s(ptype void))
(print(#s(ptype char)), #s(ptype void))
(print(#s(ptype byte)), #s(ptype void))
(print(#s(ptype boolean)), #s(ptype void))
(print(#s(rtype (java lang Object))), #s(ptype void))
(println(#s(ptype int)), #s(ptype void))
(println(#s(ptype short)), #s(ptype void))
(println(#s(ptype char)), #s(ptype void))
(println(#s(ptype byte)), #s(ptype void))
(println(#s(ptype boolean)), #s(ptype void))
(println(#s(rtype (java lang Object))), #s(ptype void))
(println(#s(rtype (java lang String))), #s(ptype void))
(println(), #s(ptype void))
(print(#s(rtype (java lang String))), #s(ptype void))
(PrintStream, #s(rtype (java io PrintStream)))
(flush(), #s(ptype void))
(nativeWrite(#s(ptype int)), #s(ptype int))
(write(#s(ptype int)), #s(ptype void))
(write(#s(ptype char)), #s(ptype void))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars

Constructors
((), g1931)

Methods
(print(#s(ptype int)), g1931)
(print(#s(ptype short)), g1931)
(print(#s(ptype char)), g1931)
(print(#s(ptype byte)), g1931)
(print(#s(ptype boolean)), g1931)
(print(#s(rtype (java lang Object))), g1931)
(println(#s(ptype int)), g1931)
(println(#s(ptype short)), g1931)
(println(#s(ptype char)), g1931)
(println(#s(ptype byte)), g1931)
(println(#s(ptype boolean)), g1931)
(println(#s(rtype (java lang Object))), g1931)
(println(#s(rtype (java lang String))), g1931)
(println(), g1931)
(print(#s(rtype (java lang String))), g1931)
(flush(), g1925)
(nativeWrite(#s(ptype int)), g1925)
(write(#s(ptype int)), g1925)
(write(#s(ptype char)), g1925)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)

-----Links
(((PrintStream) #<procedure:const>) ((OutputStream) #<procedure:const>) ((PrintStream) #<procedure:const>) ((Serializable) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Disambiguated: (s) to #s((varuse ast 1) #<envs> s)
Disambiguated: (s) to #s((varuse ast 1) #<envs> s)
Disambiguated: (String) to #s(rtype (java lang String))
Disambiguated: (String) to #s(rtype (java lang String))
Disambiguated: (String) to #s(rtype (java lang String))
Disambiguated: (String) to #s(rtype (java lang String))
Disambiguated: (String) to #s(rtype (java lang String))
Disambiguated: (String) to #s(rtype (java lang String))
Disambiguated: (String) to #s(rtype (java lang String))
Disambiguated: (String) to #s(rtype (java lang String))
Disambiguated: (String) to #s(rtype (java lang String))
Disambiguated: (String) to #s(rtype (java lang String))
Disambiguated: (String) to #s(rtype (java lang String))
Disambiguated: (String) to #s(rtype (java lang String))

====== DISAMBIGUATING NAMES FOR AST, class/interface: java.io.Serializable ======

-----Environment
Types
(Serializable, #s(rtype (java io Serializable)))

Vars

Constructors

Methods

-----Links
(((Serializable) #<procedure:const>) ((OutputStream) #<procedure:const>) ((PrintStream) #<procedure:const>) ((Serializable) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))

====== DISAMBIGUATING NAMES FOR AST, class/interface: java.lang.Boolean ======

-----Environment
Types
(MAX_VALUE, #s(ptype byte))
(toString(), #s(rtype (java lang String)))
(value, #s(ptype boolean))
(Boolean, #s(rtype (java lang Boolean)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars
(MAX_VALUE, g1950)
(value, g1950)

Constructors
((), g1950)
((#s(ptype boolean)), g1950)

Methods
(toString(), g1950)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(equals(#s(rtype (java lang Object))), g1980)

-----Links
(((Boolean) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Disambiguated: (String) to #s(rtype (java lang String))

====== DISAMBIGUATING NAMES FOR AST, class/interface: java.lang.Byte ======

-----Environment
Types
(MAX_VALUE, #s(ptype byte))
(toString(), #s(rtype (java lang String)))
(value, #s(ptype byte))
(Byte, #s(rtype (java lang Byte)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars
(MAX_VALUE, g1954)
(value, g1954)

Constructors
((), g1954)
((#s(ptype byte)), g1954)

Methods
(toString(), g1954)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(equals(#s(rtype (java lang Object))), g1980)

-----Links
(((Byte) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Disambiguated: (String) to #s(rtype (java lang String))

====== DISAMBIGUATING NAMES FOR AST, class/interface: java.lang.Character ======

-----Environment
Types
(toString(), #s(rtype (java lang String)))
(value, #s(ptype char))
(Character, #s(rtype (java lang Character)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars
(value, g1958)

Constructors
((), g1958)
((#s(ptype char)), g1958)

Methods
(toString(), g1958)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(equals(#s(rtype (java lang Object))), g1980)

-----Links
(((Character) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Disambiguated: (String) to #s(rtype (java lang String))

====== DISAMBIGUATING NAMES FOR AST, class/interface: java.lang.Class ======

-----Environment
Types
(Class, #s(rtype (java lang Class)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars

Constructors
((), g1962)

Methods
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)

-----Links
(((Class) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))

====== DISAMBIGUATING NAMES FOR AST, class/interface: java.lang.Cloneable ======

-----Environment
Types
(Cloneable, #s(rtype (java lang Cloneable)))

Vars

Constructors

Methods

-----Links
(((Cloneable) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))

====== DISAMBIGUATING NAMES FOR AST, class/interface: java.lang.Integer ======

-----Environment
Types
(MAX_VALUE, #s(ptype int))
(toString(), #s(rtype (java lang String)))
(parseInt(#s(rtype (java lang String))), #s(ptype int))
(intValue(), #s(ptype int))
(value, #s(ptype int))
(Integer, #s(rtype (java lang Integer)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars
(MAX_VALUE, g1965)
(value, g1965)

Constructors
((), g1965)
((#s(rtype (java lang String))), g1965)
((#s(ptype int)), g1965)

Methods
(toString(), g1965)
(parseInt(#s(rtype (java lang String))), g1965)
(intValue(), g1965)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(equals(#s(rtype (java lang Object))), g1980)

-----Links
(((Integer) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Disambiguated: (s) to #s((varuse ast 1) #<envs> s)
Disambiguated: (s) to #s((varuse ast 1) #<envs> s)
Disambiguated: (s) to #s((varuse ast 1) #<envs> s)
Disambiguated: (s) to #s((varuse ast 1) #<envs> s)
Disambiguated: (s) to #s((varuse ast 1) #<envs> s)
Disambiguated: (s) to #s((varuse ast 1) #<envs> s)
Disambiguated: (Integer) to #s(rtype (java lang Integer))
Disambiguated: (String) to #s(rtype (java lang String))

====== DISAMBIGUATING NAMES FOR AST, class/interface: java.lang.Number ======

-----Environment
Types
(intValue(), #s(ptype int))
(Number, #s(rtype (java lang Number)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars

Constructors
((), g1977)

Methods
(intValue(), g1977)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)

-----Links
(((Number) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))

====== DISAMBIGUATING NAMES FOR AST, class/interface: java.lang.Object ======

-----Environment
Types
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))
(Object, #s(rtype (java lang Object)))

Vars

Constructors
((), g1980)

Methods
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)

-----Links
(((Object) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))

====== DISAMBIGUATING NAMES FOR AST, class/interface: java.lang.Short ======

-----Environment
Types
(toString(), #s(rtype (java lang String)))
(intValue(), #s(ptype int))
(value, #s(ptype short))
(Short, #s(rtype (java lang Short)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars
(value, g1987)

Constructors
((), g1987)
((#s(ptype short)), g1987)

Methods
(toString(), g1987)
(intValue(), g1987)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(equals(#s(rtype (java lang Object))), g1980)

-----Links
(((Short) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Disambiguated: (String) to #s(rtype (java lang String))

====== DISAMBIGUATING NAMES FOR AST, class/interface: java.lang.String ======

-----Environment
Types
(indexOf(#s(rtype (java lang String))), #s(ptype int))
(toCharArray(), #s(atype #s(ptype char)))
(compareTo(#s(rtype (java lang String))), #s(ptype int))
(compareTo(#s(rtype (java lang Object))), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(hashCode(), #s(ptype int))
(trim(), #s(rtype (java lang String)))
(substring(#s(ptype int) #s(ptype int)), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))
(valueOf(#s(rtype (java lang String))), #s(rtype (java lang String)))
(valueOf(#s(rtype (java lang Object))), #s(rtype (java lang String)))
(valueOf(#s(ptype boolean)), #s(rtype (java lang String)))
(valueOf(#s(ptype byte)), #s(rtype (java lang String)))
(valueOf(#s(ptype short)), #s(rtype (java lang String)))
(valueOf(#s(ptype int)), #s(rtype (java lang String)))
(valueOf(#s(ptype char)), #s(rtype (java lang String)))
(concat(#s(rtype (java lang String))), #s(rtype (java lang String)))
(charAt(#s(ptype int)), #s(ptype char))
(length(), #s(ptype int))
(chars, #s(atype #s(ptype char)))
(String, #s(rtype (java lang String)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))

Vars
(chars, g1992)

Constructors
((#s(rtype (java lang String))), g1992)
((#s(atype #s(ptype char))), g1992)
((), g1992)

Methods
(indexOf(#s(rtype (java lang String))), g1992)
(toCharArray(), g1992)
(compareTo(#s(rtype (java lang String))), g1992)
(compareTo(#s(rtype (java lang Object))), g1992)
(toString(), g1992)
(hashCode(), g1992)
(trim(), g1992)
(substring(#s(ptype int) #s(ptype int)), g1992)
(equals(#s(rtype (java lang Object))), g1992)
(valueOf(#s(rtype (java lang String))), g1992)
(valueOf(#s(rtype (java lang Object))), g1992)
(valueOf(#s(ptype boolean)), g1992)
(valueOf(#s(ptype byte)), g1992)
(valueOf(#s(ptype short)), g1992)
(valueOf(#s(ptype int)), g1992)
(valueOf(#s(ptype char)), g1992)
(concat(#s(rtype (java lang String))), g1992)
(charAt(#s(ptype int)), g1992)
(length(), g1992)
(getClass(), g1980)
(clone(), g1980)

-----Links
(((String) #<procedure:const>) ((Arrays) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Disambiguated: (chars length) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> chars) length)
Disambiguated: (chars length) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> chars) length)
Disambiguated: (chars length) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> chars) length)
Disambiguated: (other chars) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> other) chars)
Disambiguated: (s2) to #s((varuse ast 1) #<envs> s2)
Disambiguated: (s2) to #s((varuse ast 1) #<envs> s2)
Disambiguated: (s2 chars) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> s2) chars)
Disambiguated: (String) to #s(rtype (java lang String))
Disambiguated: (String) to #s(rtype (java lang String))
Disambiguated: (o) to #s((varuse ast 1) #<envs> o)
Disambiguated: (Arrays) to #s(rtype (java util Arrays))
Disambiguated: (chars length) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> chars) length)
Disambiguated: (chars length) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> chars) length)
Disambiguated: (other chars length) to #s((fieldaccess ast 1) #<envs> #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> other) chars) length)
Disambiguated: (chars length) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> chars) length)
Disambiguated: (other chars length) to #s((fieldaccess ast 1) #<envs> #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> other) chars) length)
Disambiguated: (other chars) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> other) chars)
Disambiguated: (other chars) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> other) chars)
Disambiguated: (chars length) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> chars) length)
Disambiguated: (ret length) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> ret) length)
Disambiguated: (needle) to #s((varuse ast 1) #<envs> needle)
Disambiguated: (needle chars) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> needle) chars)

====== DISAMBIGUATING NAMES FOR AST, class/interface: java.lang.System ======

-----Environment
Types
(gc(), #s(ptype void))
(out, #s(rtype (java io PrintStream)))
(System, #s(rtype (java lang System)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars
(out, g2051)

Constructors
((), g2051)

Methods
(gc(), g2051)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)

-----Links
(((System) #<procedure:const>) ((PrintStream) #<procedure:const>) ((Boolean) #<procedure:const>) ((Byte) #<procedure:const>) ((Character) #<procedure:const>) ((Class) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Integer) #<procedure:const>) ((Number) #<procedure:const>) ((Object) #<procedure:const>) ((Short) #<procedure:const>) ((String) #<procedure:const>) ((System) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))

====== DISAMBIGUATING NAMES FOR AST, class/interface: java.util.Arrays ======

-----Environment
Types
(equals(#s(atype #s(ptype char)) #s(atype #s(ptype char))), #s(ptype boolean))
(equals(#s(atype #s(ptype boolean)) #s(atype #s(ptype boolean))), #s(ptype boolean))
(Arrays, #s(rtype (java util Arrays)))
(getClass(), #s(rtype (java lang Class)))
(clone(), #s(rtype (java lang Object)))
(hashCode(), #s(ptype int))
(toString(), #s(rtype (java lang String)))
(equals(#s(rtype (java lang Object))), #s(ptype boolean))

Vars

Constructors
((), g2054)

Methods
(equals(#s(atype #s(ptype char)) #s(atype #s(ptype char))), g2054)
(equals(#s(atype #s(ptype boolean)) #s(atype #s(ptype boolean))), g2054)
(getClass(), g1980)
(clone(), g1980)
(hashCode(), g1980)
(toString(), g1980)
(equals(#s(rtype (java lang Object))), g1980)

-----Links
(((Arrays) #<procedure:const>) ((Arrays) #<procedure:const>) ((System) #<procedure:const>) ((String) #<procedure:const>) ((Short) #<procedure:const>) ((Object) #<procedure:const>) ((Number) #<procedure:const>) ((Integer) #<procedure:const>) ((Cloneable) #<procedure:const>) ((Class) #<procedure:const>) ((Character) #<procedure:const>) ((Byte) #<procedure:const>) ((Boolean) #<procedure:const>))
Disambiguated: (a1 length) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> a1) length)
Disambiguated: (a2 length) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> a2) length)
Disambiguated: (a1 length) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> a1) length)
Disambiguated: (a1 length) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> a1) length)
Disambiguated: (a2 length) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> a2) length)
Disambiguated: (a1 length) to #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> a1) length)


=========== Type Checking ==========
###### TYPE CHECKING (statictest) ####
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
###### TYPE CHECKING (java io OutputStream) ####
superclass? A: (java io PrintStream), B: (java io OutputStream)
JHVIUFG ((java io PrintStream) (java io OutputStream) (java lang Object))
###### TYPE CHECKING (java io PrintStream) ####
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype boolean) #s(ptype boolean)
###### TYPE CHECKING (java io Serializable) ####
###### TYPE CHECKING (java lang Boolean) ####
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(ptype byte) #s(ptype byte)
###### TYPE CHECKING (java lang Byte) ####
type-ast=? #s(ptype byte) #s(ptype byte)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(ptype byte) #s(ptype byte)
###### TYPE CHECKING (java lang Character) ####
type-ast=? #s(ptype char) #s(ptype char)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
###### TYPE CHECKING (java lang Class) ####
###### TYPE CHECKING (java lang Cloneable) ####
###### TYPE CHECKING (java lang Integer) ####
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
natype-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(ptype int) #s(ptype int)
###### TYPE CHECKING (java lang Number) ####
###### TYPE CHECKING (java lang Object) ####
type-ast=? #s(rtype (java lang Object)) #s(rtype (java lang Object))
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(ptype int) #s(ptype int)
superclass? A: (java lang Object), B: (java lang Object)
JHVIUFG ((java lang Object))
###### TYPE CHECKING (java lang Short) ####
type-ast=? #s(ptype short) #s(ptype short)
type-ast=? #s(ptype int) #s(ptype int)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
###### TYPE CHECKING (java lang String) ####
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype char) #s(ptype char)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype boolean) #s(ptype boolean)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype boolean) #s(ptype boolean)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype char) #s(ptype char)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype int) #s(ptype int)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
natype-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
natype-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype int) #s(ptype int)
natype-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype boolean) #s(ptype boolean)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(ptype boolean) #s(ptype boolean)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(ptype boolean) #s(ptype boolean)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(ptype boolean) #s(ptype boolean)
natype-ast=? #s(ptype boolean) #s(ptype boolean)
natype-ast=? #s(rtype (java lang Object)) #s(rtype (java lang String))
superclass? A: (java lang String), B: (java lang Object)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang Object))
superclass? A: (java lang Object), B: (java lang String)
JHVIUFG ((java lang Object))
superclass? A: (java lang String), B: (java lang Object)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang Object))
superclass? A: (java lang Object), B: (java lang String)
JHVIUFG ((java lang Object))
superclass? A: (java lang String), B: (java lang Object)
JHVIUFG ((java lang String) (java lang Object))
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang Object))
superclass? A: (java lang Object), B: (java lang String)
JHVIUFG ((java lang Object))
superclass? A: (java lang String), B: (java lang Object)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang Object))
superclass? A: (java lang Object), B: (java lang String)
JHVIUFG ((java lang Object))
superclass? A: (java lang String), B: (java lang Object)
JHVIUFG ((java lang String) (java lang Object))
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang Object))
superclass? A: (java lang Object), B: (java lang String)
JHVIUFG ((java lang Object))
superclass? A: (java lang String), B: (java lang Object)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang Object))
superclass? A: (java lang Object), B: (java lang String)
JHVIUFG ((java lang Object))
superclass? A: (java lang String), B: (java lang Object)
JHVIUFG ((java lang String) (java lang Object))
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
type-ast=? #s(ptype int) #s(ptype int)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
natype-ast=? #s(ptype boolean) #s(ptype boolean)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
natype-ast=? #s(ptype boolean) #s(ptype boolean)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
natype-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype boolean) #s(ptype boolean)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype boolean) #s(ptype boolean)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
superclass? A: (java lang String), B: (java lang String)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang Object))
superclass? A: (java lang Object), B: (java lang String)
JHVIUFG ((java lang Object))
superclass? A: (java lang String), B: (java lang Object)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang Object))
superclass? A: (java lang Object), B: (java lang String)
JHVIUFG ((java lang Object))
superclass? A: (java lang String), B: (java lang Object)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang Object))
superclass? A: (java lang Object), B: (java lang String)
JHVIUFG ((java lang Object))
superclass? A: (java lang String), B: (java lang Object)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang Object))
superclass? A: (java lang Object), B: (java lang String)
JHVIUFG ((java lang Object))
superclass? A: (java lang String), B: (java lang Object)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(rtype (java lang String)) #s(rtype (java lang Object))
superclass? A: (java lang Object), B: (java lang String)
JHVIUFG ((java lang Object))
superclass? A: (java lang String), B: (java lang Object)
JHVIUFG ((java lang String) (java lang Object))
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
naTHING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
natype-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
naTHING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
naTHING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
naTHING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype char) #s(ptype char)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
naTHING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
THING: #s((vdecl ast 1) () public () #s(atype #s(ptype char)) chars)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
natype-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
###### TYPE CHECKING (java lang System) ####
superclass? A: (java io PrintStream), B: (java io PrintStream)
JHVIUFG ((java io PrintStream) (java io OutputStream) (java lang Object))
###### TYPE CHECKING (java util Arrays) ####
natype-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
natype-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype boolean) #s(ptype boolean)
natype-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype int) #s(ptype int)
type-ast=? #s(ptype int) #s(ptype int)
natype-ast=? #s(ptype boolean) #s(ptype boolean)
type-ast=? #s(ptype boolean) #s(ptype boolean)
c-unit
  ()
  (pimport (java lang))
  class public empty statictest empty empty
  block g126
    (varassign (vdecl public static (ptype int) x) (literal (ptype int) 10)
    constructor public (methoddecl statictest)
      block g127
    method public (static) (ptype int) (methoddecl test)
      block g128
        (varassign (vdecl empty empty (ptype int) y) (binop plus (varuse x) (literal (ptype int) 1))
        block g129
          (return (literal (ptype int) 1))c-unit
  (java io)
  (pimport (java lang))
  class public empty OutputStream empty empty
  block g1925
    constructor public (methoddecl OutputStream)
      block g1926
    method public empty (ptype void) (methoddecl write (parameter (ptype char) c))
      block g1927
        (methodcall empty write(#s((cast ast 1) #<envs> #s(ptype int) #s((varuse ast 1) #<envs> c))))
    method public empty (ptype void) (methoddecl write (parameter (ptype int) b))
      block g1928
        (methodcall (rtype (java io PrintStream)) nativeWrite(#s((varuse ast 1) #<envs> b)))
    method protected (static native) (ptype int) (methoddecl nativeWrite (parameter (ptype int) b))
      block g1930
    method public empty (ptype void) (methoddecl flush)
      block g1929c-unit
  (java io)
  (pimport (java lang))
  class public empty PrintStream (java io OutputStream) empty
  block g1931
    constructor public (methoddecl PrintStream)
      block g1932
    method public empty (ptype void) (methoddecl print (parameter (rtype (java lang String)) s))
      block g1933
        for (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0) (binop lt (varuse i) (methodcall (varuse s) lengthempty)) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
          block g1934
            (methodcall empty write(#s((methodcall ast 1) #<envs> #s((varuse ast 1) #<envs> s) charAt (#s((varuse ast 1) #<envs> i)))))
    method public empty (ptype void) (methoddecl println)
      block g1935
        (methodcall empty println(#s((literal ast 1) () #s(rtype (java lang String)) "")))
    method public empty (ptype void) (methoddecl println (parameter (rtype (java lang String)) s))
      block g1936
        (methodcall empty print(#s((varuse ast 1) #<envs> s)))
        (methodcall empty write(#s((literal ast 1) () #s(ptype char) 39)))
    method public empty (ptype void) (methoddecl println (parameter (rtype (java lang Object)) b))
      block g1937
        (methodcall empty println(#s((methodcall ast 1) #<envs> #s(rtype (java lang String)) valueOf (#s((varuse ast 1) #<envs> b)))))
    method public empty (ptype void) (methoddecl println (parameter (ptype boolean) b))
      block g1938
        (methodcall empty println(#s((methodcall ast 1) #<envs> #s(rtype (java lang String)) valueOf (#s((varuse ast 1) #<envs> b)))))
    method public empty (ptype void) (methoddecl println (parameter (ptype byte) b))
      block g1939
        (methodcall empty println(#s((methodcall ast 1) #<envs> #s(rtype (java lang String)) valueOf (#s((varuse ast 1) #<envs> b)))))
    method public empty (ptype void) (methoddecl println (parameter (ptype char) b))
      block g1940
        (methodcall empty println(#s((methodcall ast 1) #<envs> #s(rtype (java lang String)) valueOf (#s((varuse ast 1) #<envs> b)))))
    method public empty (ptype void) (methoddecl println (parameter (ptype short) b))
      block g1941
        (methodcall empty println(#s((methodcall ast 1) #<envs> #s(rtype (java lang String)) valueOf (#s((varuse ast 1) #<envs> b)))))
    method public empty (ptype void) (methoddecl println (parameter (ptype int) b))
      block g1942
        (methodcall empty println(#s((methodcall ast 1) #<envs> #s(rtype (java lang String)) valueOf (#s((varuse ast 1) #<envs> b)))))
    method public empty (ptype void) (methoddecl print (parameter (rtype (java lang Object)) b))
      block g1943
        (methodcall empty print(#s((methodcall ast 1) #<envs> #s(rtype (java lang String)) valueOf (#s((varuse ast 1) #<envs> b)))))
    method public empty (ptype void) (methoddecl print (parameter (ptype boolean) b))
      block g1944
        (methodcall empty print(#s((methodcall ast 1) #<envs> #s(rtype (java lang String)) valueOf (#s((varuse ast 1) #<envs> b)))))
    method public empty (ptype void) (methoddecl print (parameter (ptype byte) b))
      block g1945
        (methodcall empty print(#s((methodcall ast 1) #<envs> #s(rtype (java lang String)) valueOf (#s((varuse ast 1) #<envs> b)))))
    method public empty (ptype void) (methoddecl print (parameter (ptype char) b))
      block g1946
        (methodcall empty print(#s((methodcall ast 1) #<envs> #s(rtype (java lang String)) valueOf (#s((varuse ast 1) #<envs> b)))))
    method public empty (ptype void) (methoddecl print (parameter (ptype short) b))
      block g1947
        (methodcall empty print(#s((methodcall ast 1) #<envs> #s(rtype (java lang String)) valueOf (#s((varuse ast 1) #<envs> b)))))
    method public empty (ptype void) (methoddecl print (parameter (ptype int) b))
      block g1948
        (methodcall empty print(#s((methodcall ast 1) #<envs> #s(rtype (java lang String)) valueOf (#s((varuse ast 1) #<envs> b)))))c-unit
  (java io)
  (pimport (java lang))
  interface public empty Serializable empty
  block g1949c-unit
  (java lang)
  (pimport (java lang))
  class public final Boolean empty empty
  block g1950
    (vdecl public empty (ptype boolean) value)
    constructor public (methoddecl Boolean (parameter (ptype boolean) i))
      block g1951
        (varassign (varuse value) (varuse i)
    constructor public (methoddecl Boolean)
      block g1952
    method public empty (rtype (java lang String)) (methoddecl toString)
      block g1953
        (return (methodcall (rtype (java lang String)) valueOf(#s((varuse ast 1) #<envs> value))))
    (varassign (vdecl public static (ptype byte) MAX_VALUE) (literal (ptype byte) 127)c-unit
  (java lang)
  (pimport (java lang))
  class public final Byte empty empty
  block g1954
    (vdecl public empty (ptype byte) value)
    constructor public (methoddecl Byte (parameter (ptype byte) i))
      block g1955
        (varassign (varuse value) (varuse i)
    constructor public (methoddecl Byte)
      block g1956
    method public empty (rtype (java lang String)) (methoddecl toString)
      block g1957
        (return (methodcall (rtype (java lang String)) valueOf(#s((varuse ast 1) #<envs> value))))
    (varassign (vdecl public static (ptype byte) MAX_VALUE) (literal (ptype byte) 127)c-unit
  (java lang)
  (pimport (java lang))
  class public final Character empty empty
  block g1958
    (vdecl public empty (ptype char) value)
    constructor public (methoddecl Character (parameter (ptype char) i))
      block g1959
        (varassign (varuse value) (varuse i)
    constructor public (methoddecl Character)
      block g1960
    method public empty (rtype (java lang String)) (methoddecl toString)
      block g1961
        (return (methodcall (rtype (java lang String)) valueOf(#s((varuse ast 1) #<envs> value))))c-unit
  (java lang)
  (pimport (java lang))
  class public empty Class empty empty
  block g1962
    constructor public (methoddecl Class)
      block g1963c-unit
  (java lang)
  (pimport (java lang))
  interface public empty Cloneable empty
  block g1964c-unit
  (java lang)
  (pimport (java lang))
  class public final Integer (java lang Number) empty
  block g1965
    (vdecl public empty (ptype int) value)
    constructor public (methoddecl Integer (parameter (ptype int) i))
      block g1966
        (varassign (varuse value) (varuse i)
    method public empty (ptype int) (methoddecl intValue)
      block g1967
        (return (varuse value))
    method public (static) (ptype int) (methoddecl parseInt (parameter (rtype (java lang String)) s))
      block g1968
        (varassign (vdecl empty empty (ptype int) ret) (literal (ptype int) 0)
        block g1971
          (varassign (vdecl empty empty (ptype boolean) neg) (literal (ptype boolean) #f)
          block g1972
            (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0)
            block g1973
              while (binop ampamp (binop lt (varuse i) (methodcall (varuse s) lengthempty)) (binop barbar (binop eqeq (methodcall (varuse s) charAt(#s((varuse ast 1) #<envs> i))) (literal (ptype char) 39)) (binop ampamp (binop gteq (methodcall (varuse s) charAt(#s((varuse ast 1) #<envs> i))) (literal (ptype char) 39)) (binop lteq (methodcall (varuse s) charAt(#s((varuse ast 1) #<envs> i))) (literal (ptype char) 39)))))
                block g1969
                  iff (binop eqeq (methodcall (varuse s) charAt(#s((varuse ast 1) #<envs> i))) (literal (ptype char) 39)) (varassign (varuse neg) (unop not (varuse neg))block g1970
                      (varassign (varuse ret) (binop minus (binop plus (binop star (varuse ret) (literal (ptype int) 10)) (methodcall (varuse s) charAt(#s((varuse ast 1) #<envs> i)))) (literal (ptype char) 39))
                  (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
              iff (varuse neg) (varassign (varuse ret) (unop minus (varuse ret))empty
              (return (varuse ret))
    constructor public (methoddecl Integer (parameter (rtype (java lang String)) s))
      block g1974
        (varassign (varuse value) (methodcall (rtype (java lang Integer)) parseInt(#s((varuse ast 1) #<envs> s)))
    constructor public (methoddecl Integer)
      block g1975
        (varassign (varuse value) (literal (ptype int) 0)
    method public empty (rtype (java lang String)) (methoddecl toString)
      block g1976
        (return (methodcall (rtype (java lang String)) valueOf(#s((varuse ast 1) #<envs> value))))
    (varassign (vdecl public static (ptype int) MAX_VALUE) (literal (ptype int) 2147483647)c-unit
  (java lang)
  (pimport (java lang))
  class public abstract Number empty empty
  block g1977
    method public (abstract) (ptype int) (methoddecl intValue)
      block g1979
    constructor public (methoddecl Number)
      block g1978c-unit
  (java lang)
  (pimport (java lang))
  class public empty Object empty empty
  block g1980
    constructor public (methoddecl Object)
      block g1981
    method public empty (ptype boolean) (methoddecl equals (parameter (rtype (java lang Object)) other))
      block g1982
        (return (binop eqeq (this (rtype (java lang Object))) (varuse other)))
    method public empty (rtype (java lang String)) (methoddecl toString)
      block g1983
        (return (literal (rtype (java lang String)) "Some random object"))
    method public empty (ptype int) (methoddecl hashCode)
      block g1984
        (return (literal (ptype int) 42))
    method protected empty (rtype (java lang Object)) (methoddecl clone)
      block g1985
        (return (this (rtype (java lang Object))))
    method public (final) (rtype (java lang Class)) (methoddecl getClass)
      block g1986
        (return (literal (ptype null) null))c-unit
  (java lang)
  (pimport (java lang))
  class public final Short (java lang Number) empty
  block g1987
    (vdecl public empty (ptype short) value)
    constructor public (methoddecl Short (parameter (ptype short) i))
      block g1988
        (varassign (varuse value) (varuse i)
    method public empty (ptype int) (methoddecl intValue)
      block g1989
        (return (cast (ptype int) (varuse value)))
    constructor public (methoddecl Short)
      block g1990
    method public empty (rtype (java lang String)) (methoddecl toString)
      block g1991
        (return (methodcall (rtype (java lang String)) valueOf(#s((varuse ast 1) #<envs> value))))c-unit
  (java lang)
  (pimport (java lang))
  (cimport (java util Arrays))
  class public empty String empty empty
  block g1992
    (vdecl public empty (atype (ptype char)) chars)
    method public empty (ptype int) (methoddecl length)
      block g1993
        (return (fieldaccess (varuse chars) length))
    method public empty (ptype char) (methoddecl charAt (parameter (ptype int) i))
      block g1994
        (return (arrayaccess (varuse chars) (varuse i)))
    constructor public (methoddecl String)
      block g1995
        (varassign (varuse chars) (arraycreate (ptype char) (literal (ptype int) 0))
    constructor public (methoddecl String (parameter (atype (ptype char)) chars))
      block g1996
        (varassign (fieldaccess (this (rtype (java lang String))) chars) (arraycreate (ptype char) (fieldaccess (varuse chars) length))
        for (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0) (binop lt (varuse i) (fieldaccess (varuse chars) length)) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
          block g1997
            (varassign (arrayaccess (fieldaccess (this (rtype (java lang String))) chars) (varuse i)) (arrayaccess (varuse chars) (varuse i))
    constructor public (methoddecl String (parameter (rtype (java lang String)) other))
      block g1998
        (varassign (fieldaccess (this (rtype (java lang String))) chars) (fieldaccess (varuse other) chars)
    method public empty (rtype (java lang String)) (methoddecl concat (parameter (rtype (java lang String)) s2))
      block g1999
        (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0)
        block g2002
          (varassign (vdecl empty empty (atype (ptype char)) newchars) (arraycreate (ptype char) (binop plus (methodcall empty lengthempty) (methodcall (varuse s2) lengthempty)))
          block g2003
            for (varassign (varuse i) (literal (ptype int) 0) (binop lt (varuse i) (methodcall empty lengthempty)) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
              block g2000
                (varassign (arrayaccess (varuse newchars) (varuse i)) (arrayaccess (varuse chars) (varuse i))
            for (varassign (varuse i) (literal (ptype int) 0) (binop lt (varuse i) (methodcall (varuse s2) lengthempty)) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
              block g2001
                (varassign (arrayaccess (varuse newchars) (binop plus (varuse i) (methodcall empty lengthempty))) (arrayaccess (fieldaccess (varuse s2) chars) (varuse i))
            (return (classcreate (rtype (java lang String)) (varuse newchars)))
    method public (static) (rtype (java lang String)) (methoddecl valueOf (parameter (ptype char) c))
      block g2004
        (varassign (vdecl empty empty (atype (ptype char)) newchars) (arraycreate (ptype char) (literal (ptype int) 1))
        block g2005
          (varassign (arrayaccess (varuse newchars) (literal (ptype int) 0)) (varuse c)
          (return (classcreate (rtype (java lang String)) (varuse newchars)))
    method public (static) (rtype (java lang String)) (methoddecl valueOf (parameter (ptype int) i))
      block g2006
        (varassign (vdecl empty empty (atype (ptype char)) ret) (arraycreate (ptype char) (literal (ptype int) 15))
        block g2014
          (varassign (vdecl empty empty (ptype int) j) (literal (ptype int) 0)
          block g2015
            (varassign (vdecl empty empty (ptype boolean) wasneg) (literal (ptype boolean) #f)
            block g2016
              iff (binop eqeq (varuse i) (literal (ptype int) -2147483648)) (return (literal (rtype (java lang String)) "-2147483648"))empty
              iff (binop lt (varuse i) (literal (ptype int) 0)) block g2007
                  (varassign (varuse wasneg) (literal (ptype boolean) #t)
                  (varassign (varuse i) (unop minus (varuse i))empty
              iff (binop eqeq (varuse i) (literal (ptype int) 0)) block g2008
                  (varassign (arrayaccess (varuse ret) (varuse j)) (literal (ptype char) 39)
                  (varassign (varuse j) (binop plus (varuse j) (literal (ptype int) 1))block g2009
                  while (binop gt (varuse i) (literal (ptype int) 0))
                    block g2010
                      (varassign (vdecl empty empty (ptype int) d) (binop pct (varuse i) (literal (ptype int) 10))
                      block g2011
                        (varassign (varuse i) (binop slash (varuse i) (literal (ptype int) 10))
                        (varassign (arrayaccess (varuse ret) (varuse j)) (cast (ptype char) (binop plus (varuse d) (literal (ptype char) 39)))
                        (varassign (varuse j) (binop plus (varuse j) (literal (ptype int) 1))
              iff (varuse wasneg) block g2012
                  (varassign (arrayaccess (varuse ret) (varuse j)) (literal (ptype char) 39)
                  (varassign (varuse j) (binop plus (varuse j) (literal (ptype int) 1))empty
              (varassign (vdecl empty empty (atype (ptype char)) ret2) (arraycreate (ptype char) (varuse j))
              block g2017
                for (varassign (varuse i) (literal (ptype int) 0) (binop lt (varuse i) (varuse j)) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
                  block g2013
                    (varassign (arrayaccess (varuse ret2) (varuse i)) (arrayaccess (varuse ret) (binop minus (binop minus (varuse j) (literal (ptype int) 1)) (varuse i)))
                (return (classcreate (rtype (java lang String)) (varuse ret2)))
    method public (static) (rtype (java lang String)) (methoddecl valueOf (parameter (ptype short) i))
      block g2018
        (return (methodcall (rtype (java lang String)) valueOf(#s((cast ast 1) #<envs> #s(ptype int) #s((varuse ast 1) #<envs> i)))))
    method public (static) (rtype (java lang String)) (methoddecl valueOf (parameter (ptype byte) i))
      block g2019
        (return (methodcall (rtype (java lang String)) valueOf(#s((cast ast 1) #<envs> #s(ptype int) #s((varuse ast 1) #<envs> i)))))
    method public (static) (rtype (java lang String)) (methoddecl valueOf (parameter (ptype boolean) b))
      block g2020
        iff (varuse b) (return (literal (rtype (java lang String)) "true"))(return (literal (rtype (java lang String)) "false"))
    method public (static) (rtype (java lang String)) (methoddecl valueOf (parameter (rtype (java lang Object)) o))
      block g2021
        iff (binop eqeq (varuse o) (literal (ptype null) null)) (return (literal (rtype (java lang String)) "null"))(return (methodcall (varuse o) toStringempty))
    method public (static) (rtype (java lang String)) (methoddecl valueOf (parameter (rtype (java lang String)) o))
      block g2022
        iff (binop eqeq (varuse o) (literal (ptype null) null)) (return (literal (rtype (java lang String)) "null"))(return (varuse o))
    method public empty (ptype boolean) (methoddecl equals (parameter (rtype (java lang Object)) o))
      block g2023
        iff (binop eqeq (varuse o) (literal (ptype null) null)) (return (literal (ptype boolean) #f))empty
        iff (unop not (binop instanceof (varuse o) (rtype (java lang String)))) (return (literal (ptype boolean) #f))empty
        (return (methodcall (rtype (java util Arrays)) equals(#s((varuse ast 1) #<envs> chars) #s((fieldaccess ast 1) #<envs> #s((cast ast 1) #<envs> #s(rtype (java lang String)) #s((varuse ast 1) #<envs> o)) chars))))
    method public empty (rtype (java lang String)) (methoddecl substring (parameter (ptype int) i) (parameter (ptype int) j))
      block g2024
        (varassign (vdecl empty empty (ptype int) k) (literal (ptype int) 0)
        block g2026
          iff (binop lt (varuse i) (literal (ptype int) 0)) (return (literal (rtype (java lang String)) ""))empty
          iff (binop gt (varuse j) (methodcall empty lengthempty)) (return (literal (rtype (java lang String)) ""))empty
          iff (binop lt (varuse j) (varuse i)) (return (literal (rtype (java lang String)) ""))empty
          (varassign (vdecl empty empty (atype (ptype char)) ret) (arraycreate (ptype char) (binop minus (varuse j) (varuse i)))
          block g2027
            for (varassign (varuse k) (varuse i) (binop lt (varuse k) (varuse j)) (varassign (varuse k) (binop plus (varuse k) (literal (ptype int) 1))
              block g2025
                (varassign (arrayaccess (varuse ret) (binop minus (varuse k) (varuse i))) (methodcall empty charAt(#s((varuse ast 1) #<envs> k)))
            (return (classcreate (rtype (java lang String)) (varuse ret)))
    method public empty (rtype (java lang String)) (methoddecl trim)
      block g2028
        (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0)
        block g2031
          (varassign (vdecl empty empty (ptype int) j) (literal (ptype int) 0)
          block g2032
            for (varassign (varuse i) (literal (ptype int) 0) (binop ampamp (binop lt (varuse i) (methodcall empty lengthempty)) (binop lteq (methodcall empty charAt(#s((varuse ast 1) #<envs> i))) (literal (ptype char) 39))) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
              block g2029
            for (varassign (varuse j) (binop minus (methodcall empty lengthempty) (literal (ptype int) 1)) (binop ampamp (binop gteq (varuse j) (literal (ptype int) 0)) (binop lteq (methodcall empty charAt(#s((varuse ast 1) #<envs> j))) (literal (ptype char) 39))) (varassign (varuse j) (binop minus (varuse j) (literal (ptype int) 1))
              block g2030
            iff (binop gt (varuse i) (varuse j)) (return (literal (rtype (java lang String)) ""))(return (methodcall empty substring(#s((varuse ast 1) #<envs> i) #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> j) #s((literal ast 1) () #s(ptype int) 1)))))
    method public empty (ptype int) (methoddecl hashCode)
      block g2033
        (varassign (vdecl empty empty (ptype int) h) (literal (ptype int) 0)
        block g2035
          for (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0) (binop lt (varuse i) (fieldaccess (varuse chars) length)) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
            block g2034
              (varassign (varuse h) (binop plus (binop star (literal (ptype int) 31) (varuse h)) (arrayaccess (varuse chars) (varuse i)))
          (return (varuse h))
    method public empty (rtype (java lang String)) (methoddecl toString)
      block g2036
        (return (this (rtype (java lang String))))
    method public empty (ptype int) (methoddecl compareTo (parameter (rtype (java lang Object)) other))
      block g2037
        (return (methodcall empty compareTo(#s((cast ast 1) #<envs> #s(rtype (java lang String)) #s((varuse ast 1) #<envs> other)))))
    method public empty (ptype int) (methoddecl compareTo (parameter (rtype (java lang String)) other))
      block g2038
        (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0)
        block g2040
          (varassign (vdecl empty empty (ptype boolean) b) (literal (ptype boolean) #t)
          block g2041
            while (varuse b)
              block g2039
                iff (binop ampamp (binop gteq (varuse i) (fieldaccess (varuse chars) length)) (binop gteq (varuse i) (fieldaccess (fieldaccess (varuse other) chars) length))) (return (literal (ptype int) 0))empty
                iff (binop gteq (varuse i) (fieldaccess (varuse chars) length)) (return (literal (ptype int) -1))empty
                iff (binop gteq (varuse i) (fieldaccess (fieldaccess (varuse other) chars) length)) (return (literal (ptype int) 1))empty
                iff (binop lt (arrayaccess (varuse chars) (varuse i)) (arrayaccess (fieldaccess (varuse other) chars) (varuse i))) (return (literal (ptype int) -1))empty
                iff (binop gt (arrayaccess (varuse chars) (varuse i)) (arrayaccess (fieldaccess (varuse other) chars) (varuse i))) (return (literal (ptype int) 1))empty
            (return (literal (ptype int) 0))
    method public empty (atype (ptype char)) (methoddecl toCharArray)
      block g2042
        (varassign (vdecl empty empty (atype (ptype char)) ret) (arraycreate (ptype char) (fieldaccess (varuse chars) length))
        block g2044
          for (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0) (binop lt (varuse i) (fieldaccess (varuse ret) length)) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
            block g2043
              (varassign (arrayaccess (varuse ret) (varuse i)) (arrayaccess (varuse chars) (varuse i))
          (return (varuse ret))
    method public empty (ptype int) (methoddecl indexOf (parameter (rtype (java lang String)) needle))
      block g2045
        (varassign (vdecl empty empty (ptype int) offset) (literal (ptype int) 0)
        block g2049
          (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0)
          block g2050
            for (varassign (varuse offset) (literal (ptype int) 0) (binop lt (varuse offset) (methodcall empty lengthempty)) (varassign (varuse offset) (binop plus (varuse offset) (literal (ptype int) 1))
              block g2046
                (varassign (vdecl empty empty (ptype boolean) found) (literal (ptype boolean) #t)
                block g2048
                  for (varassign (varuse i) (literal (ptype int) 0) (binop lt (varuse i) (methodcall (varuse needle) lengthempty)) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
                    block g2047
                      iff (binop gteq (binop plus (varuse i) (varuse offset)) (methodcall empty lengthempty)) (varassign (varuse found) (literal (ptype boolean) #f)iff (binop noteq (arrayaccess (varuse chars) (binop plus (varuse i) (varuse offset))) (arrayaccess (fieldaccess (varuse needle) chars) (varuse i))) (varassign (varuse found) (literal (ptype boolean) #f)empty
                  iff (varuse found) (return (varuse offset))empty
            (return (literal (ptype int) -1))c-unit
  (java lang)
  (pimport (java lang))
  (cimport (java io PrintStream))
  class public empty System empty empty
  block g2051
    (varassign (vdecl public static (rtype (java io PrintStream)) out) (classcreate (rtype (java io PrintStream)))
    method public (static) (ptype void) (methoddecl gc)
      block g2052
    constructor public (methoddecl System)
      block g2053c-unit
  (java util)
  (pimport (java lang))
  class public empty Arrays empty empty
  block g2054
    constructor public (methoddecl Arrays)
      block g2055
    method public (static) (ptype boolean) (methoddecl equals (parameter (atype (ptype boolean)) a1) (parameter (atype (ptype boolean)) a2))
      block g2056
        iff (binop noteq (fieldaccess (varuse a1) length) (fieldaccess (varuse a2) length)) (return (literal (ptype boolean) #f))empty
        for (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0) (binop lt (varuse i) (fieldaccess (varuse a1) length)) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
          block g2057
            iff (binop noteq (arrayaccess (varuse a1) (varuse i)) (arrayaccess (varuse a2) (varuse i))) (return (literal (ptype boolean) #f))empty
        (return (literal (ptype boolean) #t))
    method public (static) (ptype boolean) (methoddecl equals (parameter (atype (ptype char)) a1) (parameter (atype (ptype char)) a2))
      block g2058
        iff (binop noteq (fieldaccess (varuse a1) length) (fieldaccess (varuse a2) length)) (return (literal (ptype boolean) #f))empty
        for (varassign (vdecl empty empty (ptype int) i) (literal (ptype int) 0) (binop lt (varuse i) (fieldaccess (varuse a1) length)) (varassign (varuse i) (binop plus (varuse i) (literal (ptype int) 1))
          block g2059
            iff (binop noteq (arrayaccess (varuse a1) (varuse i)) (arrayaccess (varuse a2) (varuse i))) (return (literal (ptype boolean) #f))empty
        (return (literal (ptype boolean) #t))

=========== Reachability ==========
########## CHECKING REACHABILITY FOR (statictest) ############
########## CHECKING REACHABILITY FOR (java io OutputStream) ############
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
########## CHECKING REACHABILITY FOR (java io PrintStream) ############
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
type-ast=? #s(ptype void) #s(ptype void)
########## CHECKING REACHABILITY FOR (java io Serializable) ############
########## CHECKING REACHABILITY FOR (java lang Boolean) ############
########## CHECKING REACHABILITY FOR (java lang Byte) ############
########## CHECKING REACHABILITY FOR (java lang Character) ############
########## CHECKING REACHABILITY FOR (java lang Class) ############
########## CHECKING REACHABILITY FOR (java lang Cloneable) ############
########## CHECKING REACHABILITY FOR (java lang Integer) ############
########## CHECKING REACHABILITY FOR (java lang Number) ############
########## CHECKING REACHABILITY FOR (java lang Object) ############
########## CHECKING REACHABILITY FOR (java lang Short) ############
########## CHECKING REACHABILITY FOR (java lang String) ############
########## CHECKING REACHABILITY FOR (java lang System) ############
type-ast=? #s(ptype void) #s(ptype void)
########## CHECKING REACHABILITY FOR (java util Arrays) ############


=========== Code Generation ==========
SDECLS: ((x statictest_x_var))
SDECLS: ((x statictest_x_var))
(list (codeenv #0='("statictest") 1 #t 4 #19='("java" "lang" "Object") (list (codevar "x" #t #t #0# '#s((literal ast 1) () #s(ptype int) 10))) (list (codemeth '#s(funt "" ()) #t #f #0# 28 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "statictest" ()) #s((block ast 1) () g127 ()))) (codemeth '#s(funt "test" ()) #t #t #0# 24 '#s((method ast 1) #<envs> public (static) #s(ptype int) #s((methoddecl ast 1) () "test" ()) #s((block ast 1) () g128 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "y") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "x") #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g129 (#s((return ast 1) #<envs> #s((literal ast 1) () #s(ptype int) 1)))))))) (codemeth #10='#s(funt "getClass" ()) #f #f #2='("java" "lang" "Object") 20 #9='#s((method ast 1) #<envs> public (final) #s(rtype ("java" "lang" "Class")) #s((methoddecl ast 1) () "getClass" ()) #s((block ast 1) () g1986 (#s((return ast 1) #<envs> #s((literal ast 1) () #s(ptype null) "null")))))) (codemeth #12='#s(funt "clone" ()) #f #f #2# 16 #11='#s((method ast 1) #<envs> protected () #s(rtype #1=("java" "lang" "Object")) #s((methoddecl ast 1) () "clone" ()) #s((block ast 1) () g1985 (#s((return ast 1) #<envs> #s((this ast 1) #<envs> #s(rtype #1#))))))) (codemeth #14='#s(funt "hashCode" ()) #f #f #2# 12 #13='#s((method ast 1) #<envs> public () #s(ptype int) #s((methoddecl ast 1) () "hashCode" ()) #s((block ast 1) () g1984 (#s((return ast 1) #<envs> #s((literal ast 1) () #s(ptype int) 42)))))) (codemeth #16='#s(funt "toString" ()) #f #f #2# 8 #15='#s((method ast 1) #<envs> public () #s(rtype ("java" "lang" . #3=("String"))) #s((methoddecl ast 1) () "toString" ()) #s((block ast 1) () g1983 (#s((return ast 1) #<envs> #s((literal ast 1) () #s(rtype #36=("java" "lang" . #3#)) "\"Some random object\"")))))) (codemeth #18='#s(funt "equals" (#4=#s(rtype #1#))) #f #f #2# 4 #17='#s((method ast 1) #<envs> public () #s(ptype boolean) #s((methoddecl ast 1) () "equals" (#s((parameter ast 1) () #4# "other"))) #s((block ast 1) () g1982 (#s((return ast 1) #<envs> #s((binop ast 1) #<envs> eqeq #s((this ast 1) #<envs> #s(rtype #1#)) #s((varuse ast 1) #<envs> "other")))))))) '()) (codeenv #5='("java" "io" "OutputStream") 2 #t 4 #19# '() (list (codemeth '#s(funt "" ()) #t #f #5# 40 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "OutputStream" ()) #s((block ast 1) () g1926 ()))) (codemeth #39='#s(funt "flush" ()) #t #f #5# 36 #38='#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "flush" ()) #s((block ast 1) () g1929 ()))) (codemeth #41='#s(funt "nativeWrite" (#6=#s(ptype int))) #t #t #5# 32 #40='#s((method ast 1) #<envs> protected (static native) #s(ptype int) #s((methoddecl ast 1) () "nativeWrite" (#s((parameter ast 1) () #6# "b"))) #s((block ast 1) () g1930 ()))) (codemeth #43='#s(funt "write" (#7=#s(ptype int))) #t #f #5# 28 #42='#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "write" (#s((parameter ast 1) () #7# "b"))) #s((block ast 1) () g1928 (#s((methodcall ast 1) #<envs> #s(rtype ("java" "io" "PrintStream")) "nativeWrite" (#s((varuse ast 1) #<envs> "b"))))))) (codemeth #45='#s(funt "write" (#8=#s(ptype char))) #t #f #5# 24 #44='#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "write" (#s((parameter ast 1) () #8# "c"))) #s((block ast 1) () g1927 (#s((methodcall ast 1) #<envs> () "write" (#s((cast ast 1) #<envs> #s(ptype int) #s((varuse ast 1) #<envs> "c")))))))) (codemeth #10# #f #f #2# 20 #9#) (codemeth #12# #f #f #2# 16 #11#) (codemeth #14# #f #f #2# 12 #13#) (codemeth #16# #f #f #2# 8 #15#) (codemeth #18# #f #f #2# 4 #17#)) '(3)) (codeenv #20='("java" "io" "PrintStream") 3 #t 4 '("java" "io" "OutputStream") '() (list (codemeth '#s(funt "" ()) #t #f #20# 100 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "PrintStream" ()) #s((block ast 1) () g1932 ()))) (codemeth '#s(funt "print" (#21=#s(ptype int))) #t #f #20# 96 '#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "print" (#s((parameter ast 1) () #21# "b"))) #s((block ast 1) () g1948 (#s((methodcall ast 1) #<envs> () "print" (#s((methodcall ast 1) #<envs> #s(rtype #22=("java" "lang" . #3#)) "valueOf" (#s((varuse ast 1) #<envs> "b"))))))))) (codemeth '#s(funt "print" (#23=#s(ptype short))) #t #f #20# 92 '#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "print" (#s((parameter ast 1) () #23# "b"))) #s((block ast 1) () g1947 (#s((methodcall ast 1) #<envs> () "print" (#s((methodcall ast 1) #<envs> #s(rtype #22#) "valueOf" (#s((varuse ast 1) #<envs> "b"))))))))) (codemeth '#s(funt "print" (#24=#s(ptype char))) #t #f #20# 88 '#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "print" (#s((parameter ast 1) () #24# "b"))) #s((block ast 1) () g1946 (#s((methodcall ast 1) #<envs> () "print" (#s((methodcall ast 1) #<envs> #s(rtype #22#) "valueOf" (#s((varuse ast 1) #<envs> "b"))))))))) (codemeth '#s(funt "print" (#25=#s(ptype byte))) #t #f #20# 84 '#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "print" (#s((parameter ast 1) () #25# "b"))) #s((block ast 1) () g1945 (#s((methodcall ast 1) #<envs> () "print" (#s((methodcall ast 1) #<envs> #s(rtype #22#) "valueOf" (#s((varuse ast 1) #<envs> "b"))))))))) (codemeth '#s(funt "print" (#26=#s(ptype boolean))) #t #f #20# 80 '#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "print" (#s((parameter ast 1) () #26# "b"))) #s((block ast 1) () g1944 (#s((methodcall ast 1) #<envs> () "print" (#s((methodcall ast 1) #<envs> #s(rtype #22#) "valueOf" (#s((varuse ast 1) #<envs> "b"))))))))) (codemeth '#s(funt "print" (#27=#s(rtype #33=("java" "lang" . #72=("Object"))))) #t #f #20# 76 '#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "print" (#s((parameter ast 1) () #27# "b"))) #s((block ast 1) () g1943 (#s((methodcall ast 1) #<envs> () "print" (#s((methodcall ast 1) #<envs> #s(rtype #22#) "valueOf" (#s((varuse ast 1) #<envs> "b"))))))))) (codemeth '#s(funt "println" (#28=#s(ptype int))) #t #f #20# 72 '#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "println" (#s((parameter ast 1) () #28# "b"))) #s((block ast 1) () g1942 (#s((methodcall ast 1) #<envs> () "println" (#s((methodcall ast 1) #<envs> #s(rtype #22#) "valueOf" (#s((varuse ast 1) #<envs> "b"))))))))) (codemeth '#s(funt "println" (#29=#s(ptype short))) #t #f #20# 68 '#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "println" (#s((parameter ast 1) () #29# "b"))) #s((block ast 1) () g1941 (#s((methodcall ast 1) #<envs> () "println" (#s((methodcall ast 1) #<envs> #s(rtype #22#) "valueOf" (#s((varuse ast 1) #<envs> "b"))))))))) (codemeth '#s(funt "println" (#30=#s(ptype char))) #t #f #20# 64 '#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "println" (#s((parameter ast 1) () #30# "b"))) #s((block ast 1) () g1940 (#s((methodcall ast 1) #<envs> () "println" (#s((methodcall ast 1) #<envs> #s(rtype #22#) "valueOf" (#s((varuse ast 1) #<envs> "b"))))))))) (codemeth '#s(funt "println" (#31=#s(ptype byte))) #t #f #20# 60 '#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "println" (#s((parameter ast 1) () #31# "b"))) #s((block ast 1) () g1939 (#s((methodcall ast 1) #<envs> () "println" (#s((methodcall ast 1) #<envs> #s(rtype #22#) "valueOf" (#s((varuse ast 1) #<envs> "b"))))))))) (codemeth '#s(funt "println" (#32=#s(ptype boolean))) #t #f #20# 56 '#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "println" (#s((parameter ast 1) () #32# "b"))) #s((block ast 1) () g1938 (#s((methodcall ast 1) #<envs> () "println" (#s((methodcall ast 1) #<envs> #s(rtype #22#) "valueOf" (#s((varuse ast 1) #<envs> "b"))))))))) (codemeth '#s(funt "println" (#34=#s(rtype #33#))) #t #f #20# 52 '#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "println" (#s((parameter ast 1) () #34# "b"))) #s((block ast 1) () g1937 (#s((methodcall ast 1) #<envs> () "println" (#s((methodcall ast 1) #<envs> #s(rtype #22#) "valueOf" (#s((varuse ast 1) #<envs> "b"))))))))) (codemeth '#s(funt "println" (#35=#s(rtype #22#))) #t #f #20# 48 '#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "println" (#s((parameter ast 1) () #35# "s"))) #s((block ast 1) () g1936 (#s((methodcall ast 1) #<envs> () "print" (#s((varuse ast 1) #<envs> "s"))) #s((methodcall ast 1) #<envs> () "write" (#s((literal ast 1) () #s(ptype char) 39))))))) (codemeth '#s(funt "println" ()) #t #f #20# 44 '#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "println" ()) #s((block ast 1) () g1935 (#s((methodcall ast 1) #<envs> () "println" (#s((literal ast 1) () #s(rtype #36#) "\"\""))))))) (codemeth '#s(funt "print" (#37=#s(rtype #22#))) #t #f #20# 40 '#s((method ast 1) #<envs> public () #s(ptype void) #s((methoddecl ast 1) () "print" (#s((parameter ast 1) () #37# "s"))) #s((block ast 1) () g1933 (#s((for ast 1) #<envs> #s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "i") #s((literal ast 1) () #s(ptype int) 0)) #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "i") #s((methodcall ast 1) #<envs> #s((varuse ast 1) #<envs> "s") "length" ())) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g1934 (#s((methodcall ast 1) #<envs> () "write" (#s((methodcall ast 1) #<envs> #s((varuse ast 1) #<envs> "s") "charAt" (#s((varuse ast 1) #<envs> "i")))))))))))) (codemeth #39# #f #f #5# 36 #38#) (codemeth #41# #f #t #5# 32 #40#) (codemeth #43# #f #f #5# 28 #42#) (codemeth #45# #f #f #5# 24 #44#) (codemeth #10# #f #f #2# 20 #9#) (codemeth #12# #f #f #2# 16 #11#) (codemeth #14# #f #f #2# 12 #13#) (codemeth #16# #f #f #2# 8 #15#) (codemeth #18# #f #f #2# 4 #17#)) '()) (codeenv '("java" "io" "Serializable") 4 #f 4 #19# '() '() '()) (codeenv #46='("java" "lang" "Boolean") 5 #t 8 #19# (list (codevar "MAX_VALUE" #t #t #46# '#s((literal ast 1) #<envs> #s(ptype byte) 127)) (codevar "value" #t #f 4 '())) (list (codemeth '#s(funt "" ()) #t #f #46# 28 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "Boolean" ()) #s((block ast 1) () g1952 ()))) (codemeth '#s(funt "" (#47=#s(ptype boolean))) #t #f #46# 24 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "Boolean" (#s((parameter ast 1) () #47# "i"))) #s((block ast 1) () g1951 (#s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "value") #s((varuse ast 1) #<envs> "i")))))) (codemeth '#s(funt "toString" ()) #t #f #46# 20 '#s((method ast 1) #<envs> public () #s(rtype #48=("java" "lang" . #3#)) #s((methoddecl ast 1) () "toString" ()) #s((block ast 1) () g1953 (#s((return ast 1) #<envs> #s((methodcall ast 1) #<envs> #s(rtype #48#) "valueOf" (#s((varuse ast 1) #<envs> "value")))))))) (codemeth #10# #f #f #2# 16 #9#) (codemeth #12# #f #f #2# 12 #11#) (codemeth #14# #f #f #2# 8 #13#) (codemeth #18# #f #f #2# 4 #17#)) '()) (codeenv #49='("java" "lang" "Byte") 6 #t 8 #19# (list (codevar "MAX_VALUE" #t #t #49# '#s((literal ast 1) #<envs> #s(ptype byte) 127)) (codevar "value" #t #f 4 '())) (list (codemeth '#s(funt "" ()) #t #f #49# 28 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "Byte" ()) #s((block ast 1) () g1956 ()))) (codemeth '#s(funt "" (#50=#s(ptype byte))) #t #f #49# 24 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "Byte" (#s((parameter ast 1) () #50# "i"))) #s((block ast 1) () g1955 (#s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "value") #s((varuse ast 1) #<envs> "i")))))) (codemeth '#s(funt "toString" ()) #t #f #49# 20 '#s((method ast 1) #<envs> public () #s(rtype #51=("java" "lang" . #3#)) #s((methoddecl ast 1) () "toString" ()) #s((block ast 1) () g1957 (#s((return ast 1) #<envs> #s((methodcall ast 1) #<envs> #s(rtype #51#) "valueOf" (#s((varuse ast 1) #<envs> "value")))))))) (codemeth #10# #f #f #2# 16 #9#) (codemeth #12# #f #f #2# 12 #11#) (codemeth #14# #f #f #2# 8 #13#) (codemeth #18# #f #f #2# 4 #17#)) '()) (codeenv #52='("java" "lang" "Character") 7 #t 8 #19# (list (codevar "value" #t #f 4 '())) (list (codemeth '#s(funt "" ()) #t #f #52# 28 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "Character" ()) #s((block ast 1) () g1960 ()))) (codemeth '#s(funt "" (#53=#s(ptype char))) #t #f #52# 24 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "Character" (#s((parameter ast 1) () #53# "i"))) #s((block ast 1) () g1959 (#s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "value") #s((varuse ast 1) #<envs> "i")))))) (codemeth '#s(funt "toString" ()) #t #f #52# 20 '#s((method ast 1) #<envs> public () #s(rtype #54=("java" "lang" . #3#)) #s((methoddecl ast 1) () "toString" ()) #s((block ast 1) () g1961 (#s((return ast 1) #<envs> #s((methodcall ast 1) #<envs> #s(rtype #54#) "valueOf" (#s((varuse ast 1) #<envs> "value")))))))) (codemeth #10# #f #f #2# 16 #9#) (codemeth #12# #f #f #2# 12 #11#) (codemeth #14# #f #f #2# 8 #13#) (codemeth #18# #f #f #2# 4 #17#)) '()) (codeenv #55='("java" "lang" "Class") 8 #t 4 #19# '() (list (codemeth '#s(funt "" ()) #t #f #55# 24 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "Class" ()) #s((block ast 1) () g1963 ()))) (codemeth #10# #f #f #2# 20 #9#) (codemeth #12# #f #f #2# 16 #11#) (codemeth #14# #f #f #2# 12 #13#) (codemeth #16# #f #f #2# 8 #15#) (codemeth #18# #f #f #2# 4 #17#)) '()) (codeenv '("java" "lang" "Cloneable") 9 #f 4 #19# '() '() '()) (codeenv #56='("java" "lang" "Integer") 10 #t 8 '("java" "lang" . #65=("Number")) (list (codevar "MAX_VALUE" #t #t #56# '#s((literal ast 1) () #s(ptype int) 2147483647)) (codevar "value" #t #f 4 '())) (list (codemeth '#s(funt "" ()) #t #f #56# 40 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "Integer" ()) #s((block ast 1) () g1975 (#s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "value") #s((literal ast 1) () #s(ptype int) 0)))))) (codemeth '#s(funt "" (#57=#s(rtype #59=("java" "lang" . #3#)))) #t #f #56# 36 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "Integer" (#s((parameter ast 1) () #57# "s"))) #s((block ast 1) () g1974 (#s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "value") #s((methodcall ast 1) #<envs> #s(rtype ("java" "lang" "Integer")) "parseInt" (#s((varuse ast 1) #<envs> "s")))))))) (codemeth '#s(funt "" (#58=#s(ptype int))) #t #f #56# 32 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "Integer" (#s((parameter ast 1) () #58# "i"))) #s((block ast 1) () g1966 (#s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "value") #s((varuse ast 1) #<envs> "i")))))) (codemeth '#s(funt "toString" ()) #t #f #56# 28 '#s((method ast 1) #<envs> public () #s(rtype #59#) #s((methoddecl ast 1) () "toString" ()) #s((block ast 1) () g1976 (#s((return ast 1) #<envs> #s((methodcall ast 1) #<envs> #s(rtype #59#) "valueOf" (#s((varuse ast 1) #<envs> "value")))))))) (codemeth '#s(funt "parseInt" (#60=#s(rtype #59#))) #t #t #56# 24 '#s((method ast 1) #<envs> public (static) #s(ptype int) #s((methoddecl ast 1) () "parseInt" (#s((parameter ast 1) () #60# "s"))) #s((block ast 1) () g1968 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "ret") #s((literal ast 1) () #s(ptype int) 0)) #s((block ast 1) #<envs> g1971 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype boolean) "neg") #s((literal ast 1) () #s(ptype boolean) #f)) #s((block ast 1) #<envs> g1972 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "i") #s((literal ast 1) () #s(ptype int) 0)) #s((block ast 1) #<envs> g1973 (#s((while ast 1) #<envs> #s((binop ast 1) #<envs> ampamp #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "i") #s((methodcall ast 1) #<envs> #s((varuse ast 1) #<envs> "s") "length" ())) #s((binop ast 1) #<envs> barbar #s((binop ast 1) #<envs> eqeq #s((methodcall ast 1) #<envs> #s((varuse ast 1) #<envs> "s") "charAt" (#s((varuse ast 1) #<envs> "i"))) #s((literal ast 1) () #s(ptype char) 39)) #s((binop ast 1) #<envs> ampamp #s((binop ast 1) #<envs> gteq #s((methodcall ast 1) #<envs> #s((varuse ast 1) #<envs> "s") "charAt" (#s((varuse ast 1) #<envs> "i"))) #s((literal ast 1) () #s(ptype char) 39)) #s((binop ast 1) #<envs> lteq #s((methodcall ast 1) #<envs> #s((varuse ast 1) #<envs> "s") "charAt" (#s((varuse ast 1) #<envs> "i"))) #s((literal ast 1) () #s(ptype char) 39))))) #s((block ast 1) #<envs> g1969 (#s((iff ast 1) #<envs> #s((binop ast 1) #<envs> eqeq #s((methodcall ast 1) #<envs> #s((varuse ast 1) #<envs> "s") "charAt" (#s((varuse ast 1) #<envs> "i"))) #s((literal ast 1) () #s(ptype char) 39)) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "neg") #s((unop ast 1) #<envs> not #s((varuse ast 1) #<envs> "neg"))) #s((block ast 1) #<envs> g1970 (#s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "ret") #s((binop ast 1) #<envs> minus #s((binop ast 1) #<envs> plus #s((binop ast 1) #<envs> star #s((varuse ast 1) #<envs> "ret") #s((literal ast 1) () #s(ptype int) 10)) #s((methodcall ast 1) #<envs> #s((varuse ast 1) #<envs> "s") "charAt" (#s((varuse ast 1) #<envs> "i")))) #s((literal ast 1) () #s(ptype char) 39)))))) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 1)))))) #s((iff ast 1) #<envs> #s((varuse ast 1) #<envs> "neg") #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "ret") #s((unop ast 1) #<envs> minus #s((varuse ast 1) #<envs> "ret"))) ()) #s((return ast 1) #<envs> #s((varuse ast 1) #<envs> "ret")))))))))))) (codemeth '#s(funt "intValue" ()) #t #f #56# 20 '#s((method ast 1) #<envs> public () #s(ptype int) #s((methoddecl ast 1) () "intValue" ()) #s((block ast 1) () g1967 (#s((return ast 1) #<envs> #s((varuse ast 1) #<envs> "value")))))) (codemeth #10# #f #f #2# 16 #9#) (codemeth #12# #f #f #2# 12 #11#) (codemeth #14# #f #f #2# 8 #13#) (codemeth #18# #f #f #2# 4 #17#)) '()) (codeenv #61='("java" "lang" "Number") 11 #t 4 #19# '() (list (codemeth '#s(funt "" ()) #t #f #61# 28 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "Number" ()) #s((block ast 1) () g1978 ()))) (codemeth '#s(funt "intValue" ()) #t #f #61# 24 '#s((method ast 1) #<envs> public (abstract) #s(ptype int) #s((methoddecl ast 1) () "intValue" ()) #s((block ast 1) () g1979 ()))) (codemeth #10# #f #f #2# 20 #9#) (codemeth #12# #f #f #2# 16 #11#) (codemeth #14# #f #f #2# 12 #13#) (codemeth #16# #f #f #2# 8 #15#) (codemeth #18# #f #f #2# 4 #17#)) '(10 12)) (codeenv #2# 13 #t 4 '() '() (list (codemeth '#s(funt "" ()) #t #f #2# 24 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "Object" ()) #s((block ast 1) () g1981 ()))) (codemeth #10# #t #f #2# 20 #9#) (codemeth #12# #t #f #2# 16 #11#) (codemeth #14# #t #f #2# 12 #13#) (codemeth #16# #t #f #2# 8 #15#) (codemeth #18# #t #f #2# 4 #17#)) '(1 2 3 5 6 7 8 10 11 12 14 15 16)) (codeenv #62='("java" "lang" "Short") 12 #t 8 '("java" "lang" . #65#) (list (codevar "value" #t #f 4 '())) (list (codemeth '#s(funt "" ()) #t #f #62# 32 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "Short" ()) #s((block ast 1) () g1990 ()))) (codemeth '#s(funt "" (#63=#s(ptype short))) #t #f #62# 28 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "Short" (#s((parameter ast 1) () #63# "i"))) #s((block ast 1) () g1988 (#s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "value") #s((varuse ast 1) #<envs> "i")))))) (codemeth '#s(funt "toString" ()) #t #f #62# 24 '#s((method ast 1) #<envs> public () #s(rtype #64=("java" "lang" . #3#)) #s((methoddecl ast 1) () "toString" ()) #s((block ast 1) () g1991 (#s((return ast 1) #<envs> #s((methodcall ast 1) #<envs> #s(rtype #64#) "valueOf" (#s((varuse ast 1) #<envs> "value")))))))) (codemeth '#s(funt "intValue" ()) #t #f #62# 20 '#s((method ast 1) #<envs> public () #s(ptype int) #s((methoddecl ast 1) () "intValue" ()) #s((block ast 1) () g1989 (#s((return ast 1) #<envs> #s((cast ast 1) #<envs> #s(ptype int) #s((varuse ast 1) #<envs> "value"))))))) (codemeth #10# #f #f #2# 16 #9#) (codemeth #12# #f #f #2# 12 #11#) (codemeth #14# #f #f #2# 8 #13#) (codemeth #18# #f #f #2# 4 #17#)) '()) (codeenv #68='("java" "lang" "String") 14 #t 8 #19# (list (codevar "chars" #t #f 4 '())) (list (codemeth '#s(funt "" (#67=#s(rtype #66=("java" "lang" "String")))) #t #f #68# 96 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "String" (#s((parameter ast 1) () #67# "other"))) #s((block ast 1) () g1998 (#s((varassign ast 1) #<envs> #s((fieldaccess ast 1) #<envs> #s((this ast 1) #<envs> #s(rtype #66#)) "chars") #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "other") "chars")))))) (codemeth '#s(funt "" (#s(atype #69=#s(ptype char)))) #t #f #68# 92 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "String" (#s((parameter ast 1) () #s(atype #69#) "chars"))) #s((block ast 1) () g1996 (#s((varassign ast 1) #<envs> #s((fieldaccess ast 1) #<envs> #s((this ast 1) #<envs> #s(rtype #66#)) "chars") #s((arraycreate ast 1) #<envs> #s(ptype char) #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") "length"))) #s((for ast 1) #<envs> #s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "i") #s((literal ast 1) () #s(ptype int) 0)) #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "i") #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") "length")) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g1997 (#s((varassign ast 1) #<envs> #s((arrayaccess ast 1) #<envs> #s((fieldaccess ast 1) #<envs> #s((this ast 1) #<envs> #s(rtype #66#)) "chars") #s((varuse ast 1) #<envs> "i")) #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") #s((varuse ast 1) #<envs> "i")))))))))) (codemeth '#s(funt "" ()) #t #f #68# 88 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "String" ()) #s((block ast 1) () g1995 (#s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") #s((arraycreate ast 1) #<envs> #s(ptype char) #s((literal ast 1) () #s(ptype int) 0))))))) (codemeth '#s(funt "indexOf" (#70=#s(rtype #66#))) #t #f #68# 84 '#s((method ast 1) #<envs> public () #s(ptype int) #s((methoddecl ast 1) () "indexOf" (#s((parameter ast 1) () #70# "needle"))) #s((block ast 1) () g2045 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "offset") #s((literal ast 1) () #s(ptype int) 0)) #s((block ast 1) #<envs> g2049 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "i") #s((literal ast 1) () #s(ptype int) 0)) #s((block ast 1) #<envs> g2050 (#s((for ast 1) #<envs> #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "offset") #s((literal ast 1) () #s(ptype int) 0)) #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "offset") #s((methodcall ast 1) #<envs> () "length" ())) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "offset") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "offset") #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g2046 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype boolean) "found") #s((literal ast 1) () #s(ptype boolean) #t)) #s((block ast 1) #<envs> g2048 (#s((for ast 1) #<envs> #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 0)) #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "i") #s((methodcall ast 1) #<envs> #s((varuse ast 1) #<envs> "needle") "length" ())) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g2047 (#s((iff ast 1) #<envs> #s((binop ast 1) #<envs> gteq #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "i") #s((varuse ast 1) #<envs> "offset")) #s((methodcall ast 1) #<envs> () "length" ())) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "found") #s((literal ast 1) () #s(ptype boolean) #f)) #s((iff ast 1) #<envs> #s((binop ast 1) #<envs> noteq #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "i") #s((varuse ast 1) #<envs> "offset"))) #s((arrayaccess ast 1) #<envs> #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "needle") "chars") #s((varuse ast 1) #<envs> "i"))) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "found") #s((literal ast 1) () #s(ptype boolean) #f)) ()))))) #s((iff ast 1) #<envs> #s((varuse ast 1) #<envs> "found") #s((return ast 1) #<envs> #s((varuse ast 1) #<envs> "offset")) ())))))) #s((return ast 1) #<envs> #s((literal ast 1) #<envs> #s(ptype int) -1)))))))))) (codemeth '#s(funt "toCharArray" ()) #t #f #68# 80 '#s((method ast 1) #<envs> public () #s(atype #s(ptype char)) #s((methoddecl ast 1) () "toCharArray" ()) #s((block ast 1) () g2042 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(atype #s(ptype char)) "ret") #s((arraycreate ast 1) #<envs> #s(ptype char) #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") "length"))) #s((block ast 1) #<envs> g2044 (#s((for ast 1) #<envs> #s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "i") #s((literal ast 1) () #s(ptype int) 0)) #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "i") #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "ret") "length")) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g2043 (#s((varassign ast 1) #<envs> #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "ret") #s((varuse ast 1) #<envs> "i")) #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") #s((varuse ast 1) #<envs> "i")))))) #s((return ast 1) #<envs> #s((varuse ast 1) #<envs> "ret")))))))) (codemeth '#s(funt "compareTo" (#71=#s(rtype #66#))) #t #f #68# 76 '#s((method ast 1) #<envs> public () #s(ptype int) #s((methoddecl ast 1) () "compareTo" (#s((parameter ast 1) () #71# "other"))) #s((block ast 1) () g2038 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "i") #s((literal ast 1) () #s(ptype int) 0)) #s((block ast 1) #<envs> g2040 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype boolean) "b") #s((literal ast 1) () #s(ptype boolean) #t)) #s((block ast 1) #<envs> g2041 (#s((while ast 1) #<envs> #s((varuse ast 1) #<envs> "b") #s((block ast 1) #<envs> g2039 (#s((iff ast 1) #<envs> #s((binop ast 1) #<envs> ampamp #s((binop ast 1) #<envs> gteq #s((varuse ast 1) #<envs> "i") #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") "length")) #s((binop ast 1) #<envs> gteq #s((varuse ast 1) #<envs> "i") #s((fieldaccess ast 1) #<envs> #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "other") "chars") "length"))) #s((return ast 1) #<envs> #s((literal ast 1) () #s(ptype int) 0)) ()) #s((iff ast 1) #<envs> #s((binop ast 1) #<envs> gteq #s((varuse ast 1) #<envs> "i") #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") "length")) #s((return ast 1) #<envs> #s((literal ast 1) #<envs> #s(ptype int) -1)) ()) #s((iff ast 1) #<envs> #s((binop ast 1) #<envs> gteq #s((varuse ast 1) #<envs> "i") #s((fieldaccess ast 1) #<envs> #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "other") "chars") "length")) #s((return ast 1) #<envs> #s((literal ast 1) () #s(ptype int) 1)) ()) #s((iff ast 1) #<envs> #s((binop ast 1) #<envs> lt #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") #s((varuse ast 1) #<envs> "i")) #s((arrayaccess ast 1) #<envs> #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "other") "chars") #s((varuse ast 1) #<envs> "i"))) #s((return ast 1) #<envs> #s((literal ast 1) #<envs> #s(ptype int) -1)) ()) #s((iff ast 1) #<envs> #s((binop ast 1) #<envs> gt #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") #s((varuse ast 1) #<envs> "i")) #s((arrayaccess ast 1) #<envs> #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "other") "chars") #s((varuse ast 1) #<envs> "i"))) #s((return ast 1) #<envs> #s((literal ast 1) () #s(ptype int) 1)) ())))) #s((return ast 1) #<envs> #s((literal ast 1) () #s(ptype int) 0)))))))))) (codemeth '#s(funt "compareTo" (#73=#s(rtype #76=("java" "lang" . #72#)))) #t #f #68# 72 '#s((method ast 1) #<envs> public () #s(ptype int) #s((methoddecl ast 1) () "compareTo" (#s((parameter ast 1) () #73# "other"))) #s((block ast 1) () g2037 (#s((return ast 1) #<envs> #s((methodcall ast 1) #<envs> () "compareTo" (#s((cast ast 1) #<envs> #s(rtype #66#) #s((varuse ast 1) #<envs> "other"))))))))) (codemeth '#s(funt "toString" ()) #t #f #68# 68 '#s((method ast 1) #<envs> public () #s(rtype #66#) #s((methoddecl ast 1) () "toString" ()) #s((block ast 1) () g2036 (#s((return ast 1) #<envs> #s((this ast 1) #<envs> #s(rtype #66#))))))) (codemeth '#s(funt "hashCode" ()) #t #f #68# 64 '#s((method ast 1) #<envs> public () #s(ptype int) #s((methoddecl ast 1) () "hashCode" ()) #s((block ast 1) () g2033 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "h") #s((literal ast 1) () #s(ptype int) 0)) #s((block ast 1) #<envs> g2035 (#s((for ast 1) #<envs> #s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "i") #s((literal ast 1) () #s(ptype int) 0)) #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "i") #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") "length")) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g2034 (#s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "h") #s((binop ast 1) #<envs> plus #s((binop ast 1) #<envs> star #s((literal ast 1) () #s(ptype int) 31) #s((varuse ast 1) #<envs> "h")) #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") #s((varuse ast 1) #<envs> "i"))))))) #s((return ast 1) #<envs> #s((varuse ast 1) #<envs> "h")))))))) (codemeth '#s(funt "trim" ()) #t #f #68# 60 '#s((method ast 1) #<envs> public () #s(rtype #66#) #s((methoddecl ast 1) () "trim" ()) #s((block ast 1) () g2028 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "i") #s((literal ast 1) () #s(ptype int) 0)) #s((block ast 1) #<envs> g2031 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "j") #s((literal ast 1) () #s(ptype int) 0)) #s((block ast 1) #<envs> g2032 (#s((for ast 1) #<envs> #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 0)) #s((binop ast 1) #<envs> ampamp #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "i") #s((methodcall ast 1) #<envs> () "length" ())) #s((binop ast 1) #<envs> lteq #s((methodcall ast 1) #<envs> () "charAt" (#s((varuse ast 1) #<envs> "i"))) #s((literal ast 1) () #s(ptype char) 39))) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g2029 ())) #s((for ast 1) #<envs> #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "j") #s((binop ast 1) #<envs> minus #s((methodcall ast 1) #<envs> () "length" ()) #s((literal ast 1) () #s(ptype int) 1))) #s((binop ast 1) #<envs> ampamp #s((binop ast 1) #<envs> gteq #s((varuse ast 1) #<envs> "j") #s((literal ast 1) () #s(ptype int) 0)) #s((binop ast 1) #<envs> lteq #s((methodcall ast 1) #<envs> () "charAt" (#s((varuse ast 1) #<envs> "j"))) #s((literal ast 1) () #s(ptype char) 39))) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "j") #s((binop ast 1) #<envs> minus #s((varuse ast 1) #<envs> "j") #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g2030 ())) #s((iff ast 1) #<envs> #s((binop ast 1) #<envs> gt #s((varuse ast 1) #<envs> "i") #s((varuse ast 1) #<envs> "j")) #s((return ast 1) #<envs> #s((literal ast 1) () #s(rtype #36#) "\"\"")) #s((return ast 1) #<envs> #s((methodcall ast 1) #<envs> () "substring" (#s((varuse ast 1) #<envs> "i") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "j") #s((literal ast 1) () #s(ptype int) 1)))))))))))))) (codemeth '#s(funt "substring" (#74=#s(ptype int) #75=#s(ptype int))) #t #f #68# 56 '#s((method ast 1) #<envs> public () #s(rtype #66#) #s((methoddecl ast 1) () "substring" (#s((parameter ast 1) () #74# "i") #s((parameter ast 1) () #75# "j"))) #s((block ast 1) () g2024 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "k") #s((literal ast 1) () #s(ptype int) 0)) #s((block ast 1) #<envs> g2026 (#s((iff ast 1) #<envs> #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 0)) #s((return ast 1) #<envs> #s((literal ast 1) () #s(rtype #36#) "\"\"")) ()) #s((iff ast 1) #<envs> #s((binop ast 1) #<envs> gt #s((varuse ast 1) #<envs> "j") #s((methodcall ast 1) #<envs> () "length" ())) #s((return ast 1) #<envs> #s((literal ast 1) () #s(rtype #36#) "\"\"")) ()) #s((iff ast 1) #<envs> #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "j") #s((varuse ast 1) #<envs> "i")) #s((return ast 1) #<envs> #s((literal ast 1) () #s(rtype #36#) "\"\"")) ()) #s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(atype #s(ptype char)) "ret") #s((arraycreate ast 1) #<envs> #s(ptype char) #s((binop ast 1) #<envs> minus #s((varuse ast 1) #<envs> "j") #s((varuse ast 1) #<envs> "i")))) #s((block ast 1) #<envs> g2027 (#s((for ast 1) #<envs> #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "k") #s((varuse ast 1) #<envs> "i")) #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "k") #s((varuse ast 1) #<envs> "j")) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "k") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "k") #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g2025 (#s((varassign ast 1) #<envs> #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "ret") #s((binop ast 1) #<envs> minus #s((varuse ast 1) #<envs> "k") #s((varuse ast 1) #<envs> "i"))) #s((methodcall ast 1) #<envs> () "charAt" (#s((varuse ast 1) #<envs> "k"))))))) #s((return ast 1) #<envs> #s((classcreate ast 1) #<envs> #s(rtype #66#) (#s((varuse ast 1) #<envs> "ret")))))))))))) (codemeth '#s(funt "equals" (#77=#s(rtype #76#))) #t #f #68# 52 '#s((method ast 1) #<envs> public () #s(ptype boolean) #s((methoddecl ast 1) () "equals" (#s((parameter ast 1) () #77# "o"))) #s((block ast 1) () g2023 (#s((iff ast 1) #<envs> #s((binop ast 1) #<envs> eqeq #s((varuse ast 1) #<envs> "o") #s((literal ast 1) () #s(ptype null) "null")) #s((return ast 1) #<envs> #s((literal ast 1) () #s(ptype boolean) #f)) ()) #s((iff ast 1) #<envs> #s((unop ast 1) #<envs> not #s((binop ast 1) #<envs> instanceof #s((varuse ast 1) #<envs> "o") #s(rtype #66#))) #s((return ast 1) #<envs> #s((literal ast 1) () #s(ptype boolean) #f)) ()) #s((return ast 1) #<envs> #s((methodcall ast 1) #<envs> #s(rtype ("java" "util" "Arrays")) "equals" (#s((varuse ast 1) #<envs> "chars") #s((fieldaccess ast 1) #<envs> #s((cast ast 1) #<envs> #s(rtype #66#) #s((varuse ast 1) #<envs> "o")) "chars")))))))) (codemeth '#s(funt "valueOf" (#78=#s(rtype #66#))) #t #t #68# 48 '#s((method ast 1) #<envs> public (static) #s(rtype #66#) #s((methoddecl ast 1) () "valueOf" (#s((parameter ast 1) () #78# "o"))) #s((block ast 1) () g2022 (#s((iff ast 1) #<envs> #s((binop ast 1) #<envs> eqeq #s((varuse ast 1) #<envs> "o") #s((literal ast 1) () #s(ptype null) "null")) #s((return ast 1) #<envs> #s((literal ast 1) () #s(rtype #36#) "\"null\"")) #s((return ast 1) #<envs> #s((varuse ast 1) #<envs> "o"))))))) (codemeth '#s(funt "valueOf" (#79=#s(rtype #76#))) #t #t #68# 44 '#s((method ast 1) #<envs> public (static) #s(rtype #66#) #s((methoddecl ast 1) () "valueOf" (#s((parameter ast 1) () #79# "o"))) #s((block ast 1) () g2021 (#s((iff ast 1) #<envs> #s((binop ast 1) #<envs> eqeq #s((varuse ast 1) #<envs> "o") #s((literal ast 1) () #s(ptype null) "null")) #s((return ast 1) #<envs> #s((literal ast 1) () #s(rtype #36#) "\"null\"")) #s((return ast 1) #<envs> #s((methodcall ast 1) #<envs> #s((varuse ast 1) #<envs> "o") "toString" ()))))))) (codemeth '#s(funt "valueOf" (#80=#s(ptype boolean))) #t #t #68# 40 '#s((method ast 1) #<envs> public (static) #s(rtype #66#) #s((methoddecl ast 1) () "valueOf" (#s((parameter ast 1) () #80# "b"))) #s((block ast 1) () g2020 (#s((iff ast 1) #<envs> #s((varuse ast 1) #<envs> "b") #s((return ast 1) #<envs> #s((literal ast 1) () #s(rtype #36#) "\"true\"")) #s((return ast 1) #<envs> #s((literal ast 1) () #s(rtype #36#) "\"false\""))))))) (codemeth '#s(funt "valueOf" (#81=#s(ptype byte))) #t #t #68# 36 '#s((method ast 1) #<envs> public (static) #s(rtype #66#) #s((methoddecl ast 1) () "valueOf" (#s((parameter ast 1) () #81# "i"))) #s((block ast 1) () g2019 (#s((return ast 1) #<envs> #s((methodcall ast 1) #<envs> #s(rtype #66#) "valueOf" (#s((cast ast 1) #<envs> #s(ptype int) #s((varuse ast 1) #<envs> "i"))))))))) (codemeth '#s(funt "valueOf" (#82=#s(ptype short))) #t #t #68# 32 '#s((method ast 1) #<envs> public (static) #s(rtype #66#) #s((methoddecl ast 1) () "valueOf" (#s((parameter ast 1) () #82# "i"))) #s((block ast 1) () g2018 (#s((return ast 1) #<envs> #s((methodcall ast 1) #<envs> #s(rtype #66#) "valueOf" (#s((cast ast 1) #<envs> #s(ptype int) #s((varuse ast 1) #<envs> "i"))))))))) (codemeth '#s(funt "valueOf" (#83=#s(ptype int))) #t #t #68# 28 '#s((method ast 1) #<envs> public (static) #s(rtype #66#) #s((methoddecl ast 1) () "valueOf" (#s((parameter ast 1) () #83# "i"))) #s((block ast 1) () g2006 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(atype #s(ptype char)) "ret") #s((arraycreate ast 1) #<envs> #s(ptype char) #s((literal ast 1) () #s(ptype int) 15))) #s((block ast 1) #<envs> g2014 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "j") #s((literal ast 1) () #s(ptype int) 0)) #s((block ast 1) #<envs> g2015 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype boolean) "wasneg") #s((literal ast 1) () #s(ptype boolean) #f)) #s((block ast 1) #<envs> g2016 (#s((iff ast 1) #<envs> #s((binop ast 1) #<envs> eqeq #s((varuse ast 1) #<envs> "i") #s((literal ast 1) #<envs> #s(ptype int) -2147483648)) #s((return ast 1) #<envs> #s((literal ast 1) () #s(rtype #36#) "\"-2147483648\"")) ()) #s((iff ast 1) #<envs> #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 0)) #s((block ast 1) #<envs> g2007 (#s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "wasneg") #s((literal ast 1) () #s(ptype boolean) #t)) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((unop ast 1) #<envs> minus #s((varuse ast 1) #<envs> "i"))))) ()) #s((iff ast 1) #<envs> #s((binop ast 1) #<envs> eqeq #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 0)) #s((block ast 1) #<envs> g2008 (#s((varassign ast 1) #<envs> #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "ret") #s((varuse ast 1) #<envs> "j")) #s((literal ast 1) () #s(ptype char) 39)) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "j") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "j") #s((literal ast 1) () #s(ptype int) 1))))) #s((block ast 1) #<envs> g2009 (#s((while ast 1) #<envs> #s((binop ast 1) #<envs> gt #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 0)) #s((block ast 1) #<envs> g2010 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "d") #s((binop ast 1) #<envs> pct #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 10))) #s((block ast 1) #<envs> g2011 (#s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((binop ast 1) #<envs> slash #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 10))) #s((varassign ast 1) #<envs> #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "ret") #s((varuse ast 1) #<envs> "j")) #s((cast ast 1) #<envs> #s(ptype char) #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "d") #s((literal ast 1) () #s(ptype char) 39)))) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "j") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "j") #s((literal ast 1) () #s(ptype int) 1))))))))))) #s((iff ast 1) #<envs> #s((varuse ast 1) #<envs> "wasneg") #s((block ast 1) #<envs> g2012 (#s((varassign ast 1) #<envs> #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "ret") #s((varuse ast 1) #<envs> "j")) #s((literal ast 1) () #s(ptype char) 39)) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "j") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "j") #s((literal ast 1) () #s(ptype int) 1))))) ()) #s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(atype #s(ptype char)) "ret2") #s((arraycreate ast 1) #<envs> #s(ptype char) #s((varuse ast 1) #<envs> "j"))) #s((block ast 1) #<envs> g2017 (#s((for ast 1) #<envs> #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 0)) #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "i") #s((varuse ast 1) #<envs> "j")) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g2013 (#s((varassign ast 1) #<envs> #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "ret2") #s((varuse ast 1) #<envs> "i")) #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "ret") #s((binop ast 1) #<envs> minus #s((binop ast 1) #<envs> minus #s((varuse ast 1) #<envs> "j") #s((literal ast 1) () #s(ptype int) 1)) #s((varuse ast 1) #<envs> "i"))))))) #s((return ast 1) #<envs> #s((classcreate ast 1) #<envs> #s(rtype #66#) (#s((varuse ast 1) #<envs> "ret2")))))))))))))))) (codemeth '#s(funt "valueOf" (#84=#s(ptype char))) #t #t #68# 24 '#s((method ast 1) #<envs> public (static) #s(rtype #66#) #s((methoddecl ast 1) () "valueOf" (#s((parameter ast 1) () #84# "c"))) #s((block ast 1) () g2004 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(atype #s(ptype char)) "newchars") #s((arraycreate ast 1) #<envs> #s(ptype char) #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g2005 (#s((varassign ast 1) #<envs> #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "newchars") #s((literal ast 1) () #s(ptype int) 0)) #s((varuse ast 1) #<envs> "c")) #s((return ast 1) #<envs> #s((classcreate ast 1) #<envs> #s(rtype #66#) (#s((varuse ast 1) #<envs> "newchars")))))))))) (codemeth '#s(funt "concat" (#85=#s(rtype #66#))) #t #f #68# 20 '#s((method ast 1) #<envs> public () #s(rtype #66#) #s((methoddecl ast 1) () "concat" (#s((parameter ast 1) () #85# "s2"))) #s((block ast 1) () g1999 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "i") #s((literal ast 1) () #s(ptype int) 0)) #s((block ast 1) #<envs> g2002 (#s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(atype #s(ptype char)) "newchars") #s((arraycreate ast 1) #<envs> #s(ptype char) #s((binop ast 1) #<envs> plus #s((methodcall ast 1) #<envs> () "length" ()) #s((methodcall ast 1) #<envs> #s((varuse ast 1) #<envs> "s2") "length" ())))) #s((block ast 1) #<envs> g2003 (#s((for ast 1) #<envs> #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 0)) #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "i") #s((methodcall ast 1) #<envs> () "length" ())) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g2000 (#s((varassign ast 1) #<envs> #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "newchars") #s((varuse ast 1) #<envs> "i")) #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") #s((varuse ast 1) #<envs> "i")))))) #s((for ast 1) #<envs> #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 0)) #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "i") #s((methodcall ast 1) #<envs> #s((varuse ast 1) #<envs> "s2") "length" ())) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g2001 (#s((varassign ast 1) #<envs> #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "newchars") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "i") #s((methodcall ast 1) #<envs> () "length" ()))) #s((arrayaccess ast 1) #<envs> #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "s2") "chars") #s((varuse ast 1) #<envs> "i")))))) #s((return ast 1) #<envs> #s((classcreate ast 1) #<envs> #s(rtype #66#) (#s((varuse ast 1) #<envs> "newchars")))))))))))) (codemeth '#s(funt "charAt" (#86=#s(ptype int))) #t #f #68# 16 '#s((method ast 1) #<envs> public () #s(ptype char) #s((methoddecl ast 1) () "charAt" (#s((parameter ast 1) () #86# "i"))) #s((block ast 1) () g1994 (#s((return ast 1) #<envs> #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") #s((varuse ast 1) #<envs> "i"))))))) (codemeth '#s(funt "length" ()) #t #f #68# 12 '#s((method ast 1) #<envs> public () #s(ptype int) #s((methoddecl ast 1) () "length" ()) #s((block ast 1) () g1993 (#s((return ast 1) #<envs> #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "chars") "length")))))) (codemeth #10# #f #f #2# 8 #9#) (codemeth #12# #f #f #2# 4 #11#)) '()) (codeenv #87='("java" "lang" "System") 15 #t 4 #19# (list (codevar "out" #t #t #87# '#s((classcreate ast 1) #<envs> #s(rtype ("java" "io" "PrintStream")) ()))) (list (codemeth '#s(funt "" ()) #t #f #87# 28 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "System" ()) #s((block ast 1) () g2053 ()))) (codemeth '#s(funt "gc" ()) #t #t #87# 24 '#s((method ast 1) #<envs> public (static) #s(ptype void) #s((methoddecl ast 1) () "gc" ()) #s((block ast 1) () g2052 ()))) (codemeth #10# #f #f #2# 20 #9#) (codemeth #12# #f #f #2# 16 #11#) (codemeth #14# #f #f #2# 12 #13#) (codemeth #16# #f #f #2# 8 #15#) (codemeth #18# #f #f #2# 4 #17#)) '()) (codeenv #88='("java" "util" "Arrays") 16 #t 4 #19# '() (list (codemeth '#s(funt "" ()) #t #f #88# 32 '#s((constructor ast 1) #<envs> public #s((methoddecl ast 1) () "Arrays" ()) #s((block ast 1) () g2055 ()))) (codemeth '#s(funt "equals" (#s(atype #89=#s(ptype char)) #s(atype #90=#s(ptype char)))) #t #t #88# 28 '#s((method ast 1) #<envs> public (static) #s(ptype boolean) #s((methoddecl ast 1) () "equals" (#s((parameter ast 1) () #s(atype #89#) "a1") #s((parameter ast 1) () #s(atype #90#) "a2"))) #s((block ast 1) () g2058 (#s((iff ast 1) #<envs> #s((binop ast 1) #<envs> noteq #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "a1") "length") #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "a2") "length")) #s((return ast 1) #<envs> #s((literal ast 1) () #s(ptype boolean) #f)) ()) #s((for ast 1) #<envs> #s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "i") #s((literal ast 1) () #s(ptype int) 0)) #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "i") #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "a1") "length")) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g2059 (#s((iff ast 1) #<envs> #s((binop ast 1) #<envs> noteq #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "a1") #s((varuse ast 1) #<envs> "i")) #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "a2") #s((varuse ast 1) #<envs> "i"))) #s((return ast 1) #<envs> #s((literal ast 1) () #s(ptype boolean) #f)) ())))) #s((return ast 1) #<envs> #s((literal ast 1) () #s(ptype boolean) #t)))))) (codemeth '#s(funt "equals" (#s(atype #91=#s(ptype boolean)) #s(atype #92=#s(ptype boolean)))) #t #t #88# 24 '#s((method ast 1) #<envs> public (static) #s(ptype boolean) #s((methoddecl ast 1) () "equals" (#s((parameter ast 1) () #s(atype #91#) "a1") #s((parameter ast 1) () #s(atype #92#) "a2"))) #s((block ast 1) () g2056 (#s((iff ast 1) #<envs> #s((binop ast 1) #<envs> noteq #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "a1") "length") #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "a2") "length")) #s((return ast 1) #<envs> #s((literal ast 1) () #s(ptype boolean) #f)) ()) #s((for ast 1) #<envs> #s((varassign ast 1) #<envs> #s((vdecl ast 1) #<envs> () () #s(ptype int) "i") #s((literal ast 1) () #s(ptype int) 0)) #s((binop ast 1) #<envs> lt #s((varuse ast 1) #<envs> "i") #s((fieldaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "a1") "length")) #s((varassign ast 1) #<envs> #s((varuse ast 1) #<envs> "i") #s((binop ast 1) #<envs> plus #s((varuse ast 1) #<envs> "i") #s((literal ast 1) () #s(ptype int) 1))) #s((block ast 1) #<envs> g2057 (#s((iff ast 1) #<envs> #s((binop ast 1) #<envs> noteq #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "a1") #s((varuse ast 1) #<envs> "i")) #s((arrayaccess ast 1) #<envs> #s((varuse ast 1) #<envs> "a2") #s((varuse ast 1) #<envs> "i"))) #s((return ast 1) #<envs> #s((literal ast 1) () #s(ptype boolean) #f)) ())))) #s((return ast 1) #<envs> #s((literal ast 1) () #s(ptype boolean) #t)))))) (codemeth #10# #f #f #2# 20 #9#) (codemeth #12# #f #f #2# 16 #11#) (codemeth #14# #f #f #2# 12 #13#) (codemeth #16# #f #f #2# 8 #15#) (codemeth #18# #f #f #2# 4 #17#)) '()))
Compiled!
