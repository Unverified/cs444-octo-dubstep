(define TOKEN_NONE 'NONE)
(define TOKEN_WHITESPACE 'WHITESPACE)
(define TOKEN_NUM 'decimal-it)
(define TOKEN_ID 'id)
(define TOKEN_EXTENDS 'extends)
(define TOKEN_IMPLEMENTS 'implements)
(define TOKEN_STATIC 'static)
(define TOKEN_CLASS 'class)
(define TOKEN_IMPORT 'import)
(define TOKEN_PACKAGE 'package)
(define TOKEN_INTERFACE 'interface)
(define TOKEN_PUBLIC 'public)
(define TOKEN_PROTECTED 'protected)
(define TOKEN_FINAL 'final)
(define TOKEN_ABSTRACT 'abstract)
(define TOKEN_NATIVE 'native)
(define TOKEN_RETURN 'return)
(define TOKEN_VOID 'void)
(define TOKEN_IF 'if)
(define TOKEN_WHILE 'while)
(define TOKEN_FOR 'for)
(define TOKEN_BOOLEAN 'boolean)
(define TOKEN_INT 'int)
(define TOKEN_CHAR 'char)
(define TOKEN_BYTE 'byte)
(define TOKEN_SHORT 'short)
(define TOKEN_NULL 'null)
(define TOKEN_TRUE 'bool-lit)
(define TOKEN_THIS 'this)
(define TOKEN_FALSE 'bool-lit)
(define TOKEN_INSTANCEOF 'instanceof)
(define TOKEN_LBRACKET 'osquare)
(define TOKEN_RBRACKET 'csquare)
(define TOKEN_LPAREN 'oparen)
(define TOKEN_RPAREN 'cparen)
(define TOKEN_LBRACE 'ocurl)
(define TOKEN_RBRACE 'ccurl)
(define TOKEN_QUOT 'QUOT)
(define TOKEN_S_QUOT 'S_QUOT)
(define TOKEN_PLUS 'plus)
(define TOKEN_MINUS 'minus)
(define TOKEN_STAR 'star)
(define TOKEN_DIVIDE 'divide)
(define TOKEN_COMMENT 'COMMENT)
(define TOKEN_MOD 'pct)
(define TOKEN_ASSIGN 'eq)
(define TOKEN_NOT 'not)
(define TOKEN_GT 'gt)
(define TOKEN_LT 'lt)
(define TOKEN_GE 'gteq)
(define TOKEN_LE 'lteq)
(define TOKEN_NE 'noteq)
(define TOKEN_EQ 'eqeq)
(define TOKEN_OR 'bar)
(define TOKEN_AND 'amp)
(define TOKEN_OR_OR 'barbar)
(define TOKEN_AND_AND 'ampamp)
(define TOKEN_SEMI_COLON 'semi)
(define TOKEN_DOT 'dot)
(define TOKEN_COMMA 'comma)
